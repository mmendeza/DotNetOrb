//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/DotNetOrb/src/idlcompiler/IDL.Grammar/IDLPreprocessorParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotNetOrb.IdlCompiler {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="IDLPreprocessorParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IIDLPreprocessorParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="IDLPreprocessorParser.idlDocument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdlDocument([NotNull] IDLPreprocessorParser.IdlDocumentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="IDLPreprocessorParser.text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitText([NotNull] IDLPreprocessorParser.TextContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="IDLPreprocessorParser.code"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCode([NotNull] IDLPreprocessorParser.CodeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorInclude</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.include"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorInclude([NotNull] IDLPreprocessorParser.PreprocessorIncludeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorPragmaPrefix</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.pragma"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorPragmaPrefix([NotNull] IDLPreprocessorParser.PreprocessorPragmaPrefixContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorPragma</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.pragma"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorPragma([NotNull] IDLPreprocessorParser.PreprocessorPragmaContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorConditional</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorConditional([NotNull] IDLPreprocessorParser.PreprocessorConditionalContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorDef</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorDef([NotNull] IDLPreprocessorParser.PreprocessorDefContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorError</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorError([NotNull] IDLPreprocessorParser.PreprocessorErrorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorDefine</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorDefine([NotNull] IDLPreprocessorParser.PreprocessorDefineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="IDLPreprocessorParser.directive_text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDirective_text([NotNull] IDLPreprocessorParser.Directive_textContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorParenthesis</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorParenthesis([NotNull] IDLPreprocessorParser.PreprocessorParenthesisContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorNot</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorNot([NotNull] IDLPreprocessorParser.PreprocessorNotContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorBinary</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorBinary([NotNull] IDLPreprocessorParser.PreprocessorBinaryContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorConstant</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorConstant([NotNull] IDLPreprocessorParser.PreprocessorConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorConditionalSymbol</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorConditionalSymbol([NotNull] IDLPreprocessorParser.PreprocessorConditionalSymbolContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorDefined</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorDefined([NotNull] IDLPreprocessorParser.PreprocessorDefinedContext context);
}
} // namespace DotNetOrb.IdlCompiler
