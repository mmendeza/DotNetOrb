//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/DotNetOrb/src/idlcompiler/IDL.Grammar/IDLParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotNetOrb.IdlCompiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class IDLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INTEGER_LITERAL=1, OCTAL_LITERAL=2, HEX_LITERAL=3, FLOATING_PT_LITERAL=4, 
		FIXED_PT_LITERAL=5, WIDE_CHARACTER_LITERAL=6, CHARACTER_LITERAL=7, WIDE_STRING_LITERAL=8, 
		STRING_LITERAL=9, BOOLEAN_LITERAL=10, SEMICOLON=11, COLON=12, COMMA=13, 
		LEFT_BRACE=14, RIGHT_BRACE=15, LEFT_BRACKET=16, RIGHT_BRACKET=17, LEFT_SQUARE_BRACKET=18, 
		RIGHT_SQUARE_BRACKET=19, TILDE=20, SLASH=21, LEFT_ANG_BRACKET=22, RIGHT_ANG_BRACKET=23, 
		STAR=24, PLUS=25, MINUS=26, CARET=27, AMPERSAND=28, PIPE=29, EQUAL=30, 
		PERCENT=31, DOUBLE_COLON=32, RIGHT_SHIFT=33, LEFT_SHIFT=34, AT=35, KW_SETRAISES=36, 
		KW_OUT=37, KW_EMITS=38, KW_STRING=39, KW_SWITCH=40, KW_PUBLISHES=41, KW_TYPEDEF=42, 
		KW_USES=43, KW_PRIMARYKEY=44, KW_CUSTOM=45, KW_OCTET=46, KW_SEQUENCE=47, 
		KW_IMPORT=48, KW_STRUCT=49, KW_NATIVE=50, KW_READONLY=51, KW_FINDER=52, 
		KW_RAISES=53, KW_VOID=54, KW_PRIVATE=55, KW_EVENTTYPE=56, KW_WCHAR=57, 
		KW_IN=58, KW_DEFAULT=59, KW_PUBLIC=60, KW_SHORT=61, KW_LONG=62, KW_ENUM=63, 
		KW_WSTRING=64, KW_CONTEXT=65, KW_HOME=66, KW_FACTORY=67, KW_EXCEPTION=68, 
		KW_GETRAISES=69, KW_CONST=70, KW_VALUEBASE=71, KW_VALUETYPE=72, KW_SUPPORTS=73, 
		KW_MODULE=74, KW_OBJECT=75, KW_TRUNCATABLE=76, KW_UNSIGNED=77, KW_FIXED=78, 
		KW_UNION=79, KW_ONEWAY=80, KW_ANY=81, KW_CHAR=82, KW_CASE=83, KW_FLOAT=84, 
		KW_BOOLEAN=85, KW_MULTIPLE=86, KW_ABSTRACT=87, KW_INOUT=88, KW_PROVIDES=89, 
		KW_CONSUMES=90, KW_DOUBLE=91, KW_TYPEPREFIX=92, KW_TYPEID=93, KW_ATTRIBUTE=94, 
		KW_LOCAL=95, KW_MANAGES=96, KW_INTERFACE=97, KW_COMPONENT=98, KW_MAP=99, 
		KW_BITFIELD=100, KW_BITSET=101, KW_BITMASK=102, KW_INT8=103, KW_UINT8=104, 
		KW_INT16=105, KW_UINT16=106, KW_INT32=107, KW_UINT32=108, KW_INT64=109, 
		KW_UINT64=110, KW_AT_ANNOTATION=111, ID=112, WS=113, COMMENT=114, LINE_COMMENT=115, 
		SHARP=116, INCLUDE=117, LINE=118, PRAGMA=119, PRAGMA_VERSION=120, PRAGMA_PREFIX=121, 
		PRAGMA_ID=122, DEFINE=123, DEFINED=124, IF=125, ELIF=126, ELSE=127, UNDEF=128, 
		IFDEF=129, IFNDEF=130, ENDIF=131, TRUE=132, FALSE=133, ERROR=134, OP_BANG=135, 
		OP_LPAREN=136, OP_RPAREN=137, OP_EQUAL=138, OP_NOTEQUAL=139, OP_AND=140, 
		OP_OR=141, OP_LT=142, OP_GT=143, OP_LE=144, OP_GE=145, DIRECTIVE_WHITESPACES=146, 
		DIRECTIVE_STRING=147, CONDITIONAL_SYMBOL=148, DECIMAL_LITERAL=149, FLOAT=150, 
		NEW_LINE=151, DIRECTIVE_COMMENT=152, DIRECTIVE_LINE_COMMENT=153, DIRECTIVE_NEW_LINE=154, 
		DIRECITVE_TEXT_NEW_LINE=155, TEXT=156, SCOPED_NAME=157, VERSION_NUM=158;
	public const int
		RULE_specification = 0, RULE_definition = 1, RULE_module = 2, RULE_interface_or_forward_decl = 3, 
		RULE_interface_decl = 4, RULE_forward_decl = 5, RULE_interface_header = 6, 
		RULE_interface_body = 7, RULE_interface_export = 8, RULE_interface_inheritance_spec = 9, 
		RULE_interface_name = 10, RULE_scoped_name = 11, RULE_value = 12, RULE_value_forward_decl = 13, 
		RULE_value_box_decl = 14, RULE_value_abs_decl = 15, RULE_value_decl = 16, 
		RULE_value_header = 17, RULE_value_inheritance_spec = 18, RULE_value_name = 19, 
		RULE_value_element = 20, RULE_state_member = 21, RULE_init_decl = 22, 
		RULE_init_param_decls = 23, RULE_init_param_decl = 24, RULE_init_param_attribute = 25, 
		RULE_const_decl = 26, RULE_const_type = 27, RULE_const_exp = 28, RULE_or_expr = 29, 
		RULE_xor_expr = 30, RULE_and_expr = 31, RULE_shift_expr = 32, RULE_add_expr = 33, 
		RULE_mult_expr = 34, RULE_unary_expr = 35, RULE_unary_operator = 36, RULE_primary_expr = 37, 
		RULE_literal = 38, RULE_positive_int_const = 39, RULE_type_decl = 40, 
		RULE_type_def = 41, RULE_native_type = 42, RULE_type_declarator = 43, 
		RULE_type_spec = 44, RULE_simple_type_spec = 45, RULE_bitfield_type_spec = 46, 
		RULE_base_type_spec = 47, RULE_template_type_spec = 48, RULE_constr_type_spec = 49, 
		RULE_simple_declarators = 50, RULE_declarators = 51, RULE_declarator = 52, 
		RULE_simple_declarator = 53, RULE_complex_declarator = 54, RULE_floating_pt_type = 55, 
		RULE_integer_type = 56, RULE_signed_int = 57, RULE_signed_tiny_int = 58, 
		RULE_signed_short_int = 59, RULE_signed_long_int = 60, RULE_signed_longlong_int = 61, 
		RULE_unsigned_int = 62, RULE_unsigned_tiny_int = 63, RULE_unsigned_short_int = 64, 
		RULE_unsigned_long_int = 65, RULE_unsigned_longlong_int = 66, RULE_char_type = 67, 
		RULE_wide_char_type = 68, RULE_boolean_type = 69, RULE_octet_type = 70, 
		RULE_any_type = 71, RULE_object_type = 72, RULE_annotation_decl = 73, 
		RULE_annotation_def = 74, RULE_annotation_header = 75, RULE_annotation_inheritance_spec = 76, 
		RULE_annotation_body = 77, RULE_annotation_export = 78, RULE_annotation_member = 79, 
		RULE_annotation_member_type = 80, RULE_annotation_forward_dcl = 81, RULE_bitset_type = 82, 
		RULE_bitfield = 83, RULE_bitfield_spec = 84, RULE_bitmask_type = 85, RULE_bit_value = 86, 
		RULE_struct_type = 87, RULE_member_list = 88, RULE_member = 89, RULE_union_type = 90, 
		RULE_switch_type_spec = 91, RULE_switch_body = 92, RULE_case_stmt = 93, 
		RULE_case_label = 94, RULE_element_spec = 95, RULE_enum_type = 96, RULE_enumerator = 97, 
		RULE_sequence_type = 98, RULE_map_type = 99, RULE_string_type = 100, RULE_wide_string_type = 101, 
		RULE_array_declarator = 102, RULE_fixed_array_size = 103, RULE_attr_decl = 104, 
		RULE_except_decl = 105, RULE_op_decl = 106, RULE_op_attribute = 107, RULE_op_type_spec = 108, 
		RULE_parameter_decls = 109, RULE_param_decl = 110, RULE_param_attribute = 111, 
		RULE_raises_expr = 112, RULE_context_expr = 113, RULE_param_type_spec = 114, 
		RULE_fixed_pt_type = 115, RULE_fixed_pt_const_type = 116, RULE_value_base_type = 117, 
		RULE_constr_forward_decl = 118, RULE_import_decl = 119, RULE_imported_scope = 120, 
		RULE_type_id_decl = 121, RULE_type_prefix_decl = 122, RULE_readonly_attr_spec = 123, 
		RULE_readonly_attr_declarator = 124, RULE_attr_spec = 125, RULE_attr_declarator = 126, 
		RULE_attr_raises_expr = 127, RULE_get_excep_expr = 128, RULE_set_excep_expr = 129, 
		RULE_exception_list = 130, RULE_component = 131, RULE_component_forward_decl = 132, 
		RULE_component_decl = 133, RULE_component_header = 134, RULE_supported_interface_spec = 135, 
		RULE_component_inheritance_spec = 136, RULE_component_body = 137, RULE_component_export = 138, 
		RULE_provides_decl = 139, RULE_interface_type = 140, RULE_uses_decl = 141, 
		RULE_emits_decl = 142, RULE_publishes_decl = 143, RULE_consumes_decl = 144, 
		RULE_home_decl = 145, RULE_home_header = 146, RULE_home_inheritance_spec = 147, 
		RULE_primary_key_spec = 148, RULE_home_body = 149, RULE_home_export = 150, 
		RULE_factory_decl = 151, RULE_finder_decl = 152, RULE_event = 153, RULE_event_forward_decl = 154, 
		RULE_event_abs_decl = 155, RULE_event_decl = 156, RULE_event_header = 157, 
		RULE_annapps = 158, RULE_annotation_appl = 159, RULE_annotation_appl_params = 160, 
		RULE_annotation_appl_param = 161, RULE_pragma = 162, RULE_line = 163, 
		RULE_include = 164, RULE_directive = 165, RULE_directive_text = 166, RULE_preprocessor_expression = 167;
	public static readonly string[] ruleNames = {
		"specification", "definition", "module", "interface_or_forward_decl", 
		"interface_decl", "forward_decl", "interface_header", "interface_body", 
		"interface_export", "interface_inheritance_spec", "interface_name", "scoped_name", 
		"value", "value_forward_decl", "value_box_decl", "value_abs_decl", "value_decl", 
		"value_header", "value_inheritance_spec", "value_name", "value_element", 
		"state_member", "init_decl", "init_param_decls", "init_param_decl", "init_param_attribute", 
		"const_decl", "const_type", "const_exp", "or_expr", "xor_expr", "and_expr", 
		"shift_expr", "add_expr", "mult_expr", "unary_expr", "unary_operator", 
		"primary_expr", "literal", "positive_int_const", "type_decl", "type_def", 
		"native_type", "type_declarator", "type_spec", "simple_type_spec", "bitfield_type_spec", 
		"base_type_spec", "template_type_spec", "constr_type_spec", "simple_declarators", 
		"declarators", "declarator", "simple_declarator", "complex_declarator", 
		"floating_pt_type", "integer_type", "signed_int", "signed_tiny_int", "signed_short_int", 
		"signed_long_int", "signed_longlong_int", "unsigned_int", "unsigned_tiny_int", 
		"unsigned_short_int", "unsigned_long_int", "unsigned_longlong_int", "char_type", 
		"wide_char_type", "boolean_type", "octet_type", "any_type", "object_type", 
		"annotation_decl", "annotation_def", "annotation_header", "annotation_inheritance_spec", 
		"annotation_body", "annotation_export", "annotation_member", "annotation_member_type", 
		"annotation_forward_dcl", "bitset_type", "bitfield", "bitfield_spec", 
		"bitmask_type", "bit_value", "struct_type", "member_list", "member", "union_type", 
		"switch_type_spec", "switch_body", "case_stmt", "case_label", "element_spec", 
		"enum_type", "enumerator", "sequence_type", "map_type", "string_type", 
		"wide_string_type", "array_declarator", "fixed_array_size", "attr_decl", 
		"except_decl", "op_decl", "op_attribute", "op_type_spec", "parameter_decls", 
		"param_decl", "param_attribute", "raises_expr", "context_expr", "param_type_spec", 
		"fixed_pt_type", "fixed_pt_const_type", "value_base_type", "constr_forward_decl", 
		"import_decl", "imported_scope", "type_id_decl", "type_prefix_decl", "readonly_attr_spec", 
		"readonly_attr_declarator", "attr_spec", "attr_declarator", "attr_raises_expr", 
		"get_excep_expr", "set_excep_expr", "exception_list", "component", "component_forward_decl", 
		"component_decl", "component_header", "supported_interface_spec", "component_inheritance_spec", 
		"component_body", "component_export", "provides_decl", "interface_type", 
		"uses_decl", "emits_decl", "publishes_decl", "consumes_decl", "home_decl", 
		"home_header", "home_inheritance_spec", "primary_key_spec", "home_body", 
		"home_export", "factory_decl", "finder_decl", "event", "event_forward_decl", 
		"event_abs_decl", "event_decl", "event_header", "annapps", "annotation_appl", 
		"annotation_appl_params", "annotation_appl_param", "pragma", "line", "include", 
		"directive", "directive_text", "preprocessor_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"':'", "','", "'{'", "'}'", null, null, "'['", "']'", "'~'", null, null, 
		null, "'*'", "'+'", "'-'", "'^'", "'&'", "'|'", "'='", "'%'", "'::'", 
		"'>>'", "'<<'", "'@'", "'setraises'", "'out'", "'emits'", "'string'", 
		"'switch'", "'publishes'", "'typedef'", "'uses'", "'primarykey'", "'custom'", 
		"'octet'", "'sequence'", "'import'", "'struct'", "'native'", "'readonly'", 
		"'finder'", "'raises'", "'void'", "'private'", "'eventtype'", "'wchar'", 
		"'in'", "'default'", "'public'", "'short'", "'long'", "'enum'", "'wstring'", 
		"'context'", "'home'", "'factory'", "'exception'", "'getraises'", "'const'", 
		"'ValueBase'", "'valuetype'", "'supports'", "'module'", "'Object'", "'truncatable'", 
		"'unsigned'", "'fixed'", "'union'", "'oneway'", "'any'", "'char'", "'case'", 
		"'float'", "'boolean'", "'multiple'", "'abstract'", "'inout'", "'provides'", 
		"'consumes'", "'double'", "'typeprefix'", "'typeid'", "'attribute'", "'local'", 
		"'manages'", "'interface'", "'component'", "'map'", "'bitfield'", "'bitset'", 
		"'bitmask'", "'int8'", "'uint8'", "'int16'", "'uint16'", "'int32'", "'uint32'", 
		"'int64'", "'uint64'", "'@annotation'", null, null, null, null, "'#'", 
		null, "'line'", "'pragma'", "'pragma version'", "'pragma prefix'", "'pragma ID'", 
		null, "'defined'", "'if'", "'elif'", "'else'", "'undef'", "'ifdef'", "'ifndef'", 
		"'endif'", null, null, "'error'", "'!'", null, null, "'=='", "'!='", "'&&'", 
		"'||'", null, null, "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER_LITERAL", "OCTAL_LITERAL", "HEX_LITERAL", "FLOATING_PT_LITERAL", 
		"FIXED_PT_LITERAL", "WIDE_CHARACTER_LITERAL", "CHARACTER_LITERAL", "WIDE_STRING_LITERAL", 
		"STRING_LITERAL", "BOOLEAN_LITERAL", "SEMICOLON", "COLON", "COMMA", "LEFT_BRACE", 
		"RIGHT_BRACE", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_SQUARE_BRACKET", 
		"RIGHT_SQUARE_BRACKET", "TILDE", "SLASH", "LEFT_ANG_BRACKET", "RIGHT_ANG_BRACKET", 
		"STAR", "PLUS", "MINUS", "CARET", "AMPERSAND", "PIPE", "EQUAL", "PERCENT", 
		"DOUBLE_COLON", "RIGHT_SHIFT", "LEFT_SHIFT", "AT", "KW_SETRAISES", "KW_OUT", 
		"KW_EMITS", "KW_STRING", "KW_SWITCH", "KW_PUBLISHES", "KW_TYPEDEF", "KW_USES", 
		"KW_PRIMARYKEY", "KW_CUSTOM", "KW_OCTET", "KW_SEQUENCE", "KW_IMPORT", 
		"KW_STRUCT", "KW_NATIVE", "KW_READONLY", "KW_FINDER", "KW_RAISES", "KW_VOID", 
		"KW_PRIVATE", "KW_EVENTTYPE", "KW_WCHAR", "KW_IN", "KW_DEFAULT", "KW_PUBLIC", 
		"KW_SHORT", "KW_LONG", "KW_ENUM", "KW_WSTRING", "KW_CONTEXT", "KW_HOME", 
		"KW_FACTORY", "KW_EXCEPTION", "KW_GETRAISES", "KW_CONST", "KW_VALUEBASE", 
		"KW_VALUETYPE", "KW_SUPPORTS", "KW_MODULE", "KW_OBJECT", "KW_TRUNCATABLE", 
		"KW_UNSIGNED", "KW_FIXED", "KW_UNION", "KW_ONEWAY", "KW_ANY", "KW_CHAR", 
		"KW_CASE", "KW_FLOAT", "KW_BOOLEAN", "KW_MULTIPLE", "KW_ABSTRACT", "KW_INOUT", 
		"KW_PROVIDES", "KW_CONSUMES", "KW_DOUBLE", "KW_TYPEPREFIX", "KW_TYPEID", 
		"KW_ATTRIBUTE", "KW_LOCAL", "KW_MANAGES", "KW_INTERFACE", "KW_COMPONENT", 
		"KW_MAP", "KW_BITFIELD", "KW_BITSET", "KW_BITMASK", "KW_INT8", "KW_UINT8", 
		"KW_INT16", "KW_UINT16", "KW_INT32", "KW_UINT32", "KW_INT64", "KW_UINT64", 
		"KW_AT_ANNOTATION", "ID", "WS", "COMMENT", "LINE_COMMENT", "SHARP", "INCLUDE", 
		"LINE", "PRAGMA", "PRAGMA_VERSION", "PRAGMA_PREFIX", "PRAGMA_ID", "DEFINE", 
		"DEFINED", "IF", "ELIF", "ELSE", "UNDEF", "IFDEF", "IFNDEF", "ENDIF", 
		"TRUE", "FALSE", "ERROR", "OP_BANG", "OP_LPAREN", "OP_RPAREN", "OP_EQUAL", 
		"OP_NOTEQUAL", "OP_AND", "OP_OR", "OP_LT", "OP_GT", "OP_LE", "OP_GE", 
		"DIRECTIVE_WHITESPACES", "DIRECTIVE_STRING", "CONDITIONAL_SYMBOL", "DECIMAL_LITERAL", 
		"FLOAT", "NEW_LINE", "DIRECTIVE_COMMENT", "DIRECTIVE_LINE_COMMENT", "DIRECTIVE_NEW_LINE", 
		"DIRECITVE_TEXT_NEW_LINE", "TEXT", "SCOPED_NAME", "VERSION_NUM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "IDLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static IDLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IDLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IDLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(IDLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public SpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificationContext specification() {
		SpecificationContext _localctx = new SpecificationContext(Context, State);
		EnterRule(_localctx, 0, RULE_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9149304501201534976L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 1161194540900693L) != 0)) {
				{
				{
				State = 336;
				definition();
				}
				}
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 342;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_declContext type_decl() {
			return GetRuleContext<Type_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(IDLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Const_declContext const_decl() {
			return GetRuleContext<Const_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Except_declContext except_decl() {
			return GetRuleContext<Except_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_or_forward_declContext interface_or_forward_decl() {
			return GetRuleContext<Interface_or_forward_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_id_declContext type_id_decl() {
			return GetRuleContext<Type_id_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_prefix_declContext type_prefix_decl() {
			return GetRuleContext<Type_prefix_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventContext @event() {
			return GetRuleContext<EventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComponentContext component() {
			return GetRuleContext<ComponentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Home_declContext home_decl() {
			return GetRuleContext<Home_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_declContext annotation_decl() {
			return GetRuleContext<Annotation_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARP() { return GetToken(IDLParser.SHARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_LINE() { return GetToken(IDLParser.NEW_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_definition);
		int _la;
		try {
			State = 391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344;
				type_decl();
				State = 345;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347;
				const_decl();
				State = 348;
				Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 350;
				except_decl();
				State = 351;
				Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 353;
				interface_or_forward_decl();
				State = 354;
				Match(SEMICOLON);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 356;
				module();
				State = 357;
				Match(SEMICOLON);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 359;
				value();
				State = 360;
				Match(SEMICOLON);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 362;
				type_id_decl();
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 363;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 366;
				type_prefix_decl();
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 367;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 370;
				@event();
				State = 371;
				Match(SEMICOLON);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 373;
				component();
				State = 374;
				Match(SEMICOLON);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 376;
				home_decl();
				State = 377;
				Match(SEMICOLON);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 379;
				annotation_decl();
				State = 380;
				Match(SEMICOLON);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 382;
				include();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 383;
				Match(SHARP);
				State = 384;
				directive();
				State = 385;
				Match(NEW_LINE);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 387;
				Match(SHARP);
				State = 388;
				pragma();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 389;
				Match(SHARP);
				State = 390;
				line();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MODULE() { return GetToken(IDLParser.KW_MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 4, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			annapps();
			State = 394;
			Match(KW_MODULE);
			State = 395;
			Match(ID);
			State = 396;
			Match(LEFT_BRACE);
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 397;
				definition();
				}
				}
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -9149304501201534976L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 1161194540900693L) != 0) );
			State = 402;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_or_forward_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_declContext interface_decl() {
			return GetRuleContext<Interface_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Forward_declContext forward_decl() {
			return GetRuleContext<Forward_declContext>(0);
		}
		public Interface_or_forward_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_or_forward_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_or_forward_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_or_forward_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_or_forward_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_or_forward_declContext interface_or_forward_decl() {
		Interface_or_forward_declContext _localctx = new Interface_or_forward_declContext(Context, State);
		EnterRule(_localctx, 6, RULE_interface_or_forward_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			annapps();
			State = 407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 405;
				interface_decl();
				}
				break;
			case 2:
				{
				State = 406;
				forward_decl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_headerContext interface_header() {
			return GetRuleContext<Interface_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_bodyContext interface_body() {
			return GetRuleContext<Interface_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		public Interface_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_declContext interface_decl() {
		Interface_declContext _localctx = new Interface_declContext(Context, State);
		EnterRule(_localctx, 8, RULE_interface_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			interface_header();
			State = 410;
			Match(LEFT_BRACE);
			State = 411;
			interface_body();
			State = 412;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forward_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INTERFACE() { return GetToken(IDLParser.KW_INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABSTRACT() { return GetToken(IDLParser.KW_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCAL() { return GetToken(IDLParser.KW_LOCAL, 0); }
		public Forward_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forward_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterForward_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitForward_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForward_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Forward_declContext forward_decl() {
		Forward_declContext _localctx = new Forward_declContext(Context, State);
		EnterRule(_localctx, 10, RULE_forward_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ABSTRACT || _la==KW_LOCAL) {
				{
				State = 414;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_ABSTRACT || _la==KW_LOCAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 417;
			Match(KW_INTERFACE);
			State = 418;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INTERFACE() { return GetToken(IDLParser.KW_INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_inheritance_specContext interface_inheritance_spec() {
			return GetRuleContext<Interface_inheritance_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABSTRACT() { return GetToken(IDLParser.KW_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCAL() { return GetToken(IDLParser.KW_LOCAL, 0); }
		public Interface_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_headerContext interface_header() {
		Interface_headerContext _localctx = new Interface_headerContext(Context, State);
		EnterRule(_localctx, 12, RULE_interface_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ABSTRACT || _la==KW_LOCAL) {
				{
				State = 420;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_ABSTRACT || _la==KW_LOCAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 423;
			Match(KW_INTERFACE);
			State = 424;
			Match(ID);
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 425;
				interface_inheritance_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_exportContext[] interface_export() {
			return GetRuleContexts<Interface_exportContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_exportContext interface_export(int i) {
			return GetRuleContext<Interface_exportContext>(i);
		}
		public Interface_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_bodyContext interface_body() {
		Interface_bodyContext _localctx = new Interface_bodyContext(Context, State);
		EnterRule(_localctx, 14, RULE_interface_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2139697417753198592L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 422077043026129L) != 0)) {
				{
				{
				State = 428;
				interface_export();
				}
				}
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_exportContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_declContext type_decl() {
			return GetRuleContext<Type_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(IDLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Const_declContext const_decl() {
			return GetRuleContext<Const_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Except_declContext except_decl() {
			return GetRuleContext<Except_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_declContext attr_decl() {
			return GetRuleContext<Attr_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_declContext op_decl() {
			return GetRuleContext<Op_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_id_declContext type_id_decl() {
			return GetRuleContext<Type_id_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_prefix_declContext type_prefix_decl() {
			return GetRuleContext<Type_prefix_declContext>(0);
		}
		public Interface_exportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_export; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_export(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_export(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_export(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_exportContext interface_export() {
		Interface_exportContext _localctx = new Interface_exportContext(Context, State);
		EnterRule(_localctx, 16, RULE_interface_export);
		int _la;
		try {
			State = 457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434;
				type_decl();
				State = 435;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 437;
				const_decl();
				State = 438;
				Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 440;
				except_decl();
				State = 441;
				Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 443;
				attr_decl();
				State = 444;
				Match(SEMICOLON);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 446;
				op_decl();
				State = 447;
				Match(SEMICOLON);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 449;
				type_id_decl();
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 450;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 453;
				type_prefix_decl();
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 454;
					Match(SEMICOLON);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_inheritance_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(IDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_nameContext[] interface_name() {
			return GetRuleContexts<Interface_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_nameContext interface_name(int i) {
			return GetRuleContext<Interface_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public Interface_inheritance_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_inheritance_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_inheritance_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_inheritance_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_inheritance_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_inheritance_specContext interface_inheritance_spec() {
		Interface_inheritance_specContext _localctx = new Interface_inheritance_specContext(Context, State);
		EnterRule(_localctx, 18, RULE_interface_inheritance_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			Match(COLON);
			State = 460;
			interface_name();
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 461;
				Match(COMMA);
				State = 462;
				interface_name();
				}
				}
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		public Interface_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_nameContext interface_name() {
		Interface_nameContext _localctx = new Interface_nameContext(Context, State);
		EnterRule(_localctx, 20, RULE_interface_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			scoped_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scoped_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(IDLParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(IDLParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOUBLE_COLON() { return GetTokens(IDLParser.DOUBLE_COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON(int i) {
			return GetToken(IDLParser.DOUBLE_COLON, i);
		}
		public Scoped_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoped_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterScoped_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitScoped_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScoped_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scoped_nameContext scoped_name() {
		Scoped_nameContext _localctx = new Scoped_nameContext(Context, State);
		EnterRule(_localctx, 22, RULE_scoped_name);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLE_COLON) {
				{
				State = 470;
				Match(DOUBLE_COLON);
				}
			}

			State = 473;
			Match(ID);
			State = 478;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 474;
					Match(DOUBLE_COLON);
					State = 475;
					Match(ID);
					}
					} 
				}
				State = 480;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_declContext value_decl() {
			return GetRuleContext<Value_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_abs_declContext value_abs_decl() {
			return GetRuleContext<Value_abs_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_box_declContext value_box_decl() {
			return GetRuleContext<Value_box_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_forward_declContext value_forward_decl() {
			return GetRuleContext<Value_forward_declContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			annapps();
			State = 486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 482;
				value_decl();
				}
				break;
			case 2:
				{
				State = 483;
				value_abs_decl();
				}
				break;
			case 3:
				{
				State = 484;
				value_box_decl();
				}
				break;
			case 4:
				{
				State = 485;
				value_forward_decl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_forward_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VALUETYPE() { return GetToken(IDLParser.KW_VALUETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABSTRACT() { return GetToken(IDLParser.KW_ABSTRACT, 0); }
		public Value_forward_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_forward_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterValue_forward_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitValue_forward_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_forward_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_forward_declContext value_forward_decl() {
		Value_forward_declContext _localctx = new Value_forward_declContext(Context, State);
		EnterRule(_localctx, 26, RULE_value_forward_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ABSTRACT) {
				{
				State = 488;
				Match(KW_ABSTRACT);
				}
			}

			State = 491;
			Match(KW_VALUETYPE);
			State = 492;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_box_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VALUETYPE() { return GetToken(IDLParser.KW_VALUETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Value_box_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_box_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterValue_box_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitValue_box_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_box_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_box_declContext value_box_decl() {
		Value_box_declContext _localctx = new Value_box_declContext(Context, State);
		EnterRule(_localctx, 28, RULE_value_box_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(KW_VALUETYPE);
			State = 495;
			Match(ID);
			State = 496;
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_abs_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABSTRACT() { return GetToken(IDLParser.KW_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VALUETYPE() { return GetToken(IDLParser.KW_VALUETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_inheritance_specContext value_inheritance_spec() {
			return GetRuleContext<Value_inheritance_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_exportContext[] interface_export() {
			return GetRuleContexts<Interface_exportContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_exportContext interface_export(int i) {
			return GetRuleContext<Interface_exportContext>(i);
		}
		public Value_abs_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_abs_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterValue_abs_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitValue_abs_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_abs_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_abs_declContext value_abs_decl() {
		Value_abs_declContext _localctx = new Value_abs_declContext(Context, State);
		EnterRule(_localctx, 30, RULE_value_abs_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			Match(KW_ABSTRACT);
			State = 499;
			Match(KW_VALUETYPE);
			State = 500;
			Match(ID);
			State = 501;
			value_inheritance_spec();
			State = 502;
			Match(LEFT_BRACE);
			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2139697417753198592L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 422077043026129L) != 0)) {
				{
				{
				State = 503;
				interface_export();
				}
				}
				State = 508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 509;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Value_headerContext value_header() {
			return GetRuleContext<Value_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_elementContext[] value_element() {
			return GetRuleContexts<Value_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_elementContext value_element(int i) {
			return GetRuleContext<Value_elementContext>(i);
		}
		public Value_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterValue_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitValue_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_declContext value_decl() {
		Value_declContext _localctx = new Value_declContext(Context, State);
		EnterRule(_localctx, 32, RULE_value_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			value_header();
			State = 512;
			Match(LEFT_BRACE);
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -950747116127387648L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 422077043026137L) != 0)) {
				{
				{
				State = 513;
				value_element();
				}
				}
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 519;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VALUETYPE() { return GetToken(IDLParser.KW_VALUETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_inheritance_specContext value_inheritance_spec() {
			return GetRuleContext<Value_inheritance_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CUSTOM() { return GetToken(IDLParser.KW_CUSTOM, 0); }
		public Value_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterValue_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitValue_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_headerContext value_header() {
		Value_headerContext _localctx = new Value_headerContext(Context, State);
		EnterRule(_localctx, 34, RULE_value_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_CUSTOM) {
				{
				State = 521;
				Match(KW_CUSTOM);
				}
			}

			State = 524;
			Match(KW_VALUETYPE);
			State = 525;
			Match(ID);
			State = 526;
			value_inheritance_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_inheritance_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(IDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_nameContext[] value_name() {
			return GetRuleContexts<Value_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_nameContext value_name(int i) {
			return GetRuleContext<Value_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUPPORTS() { return GetToken(IDLParser.KW_SUPPORTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_nameContext[] interface_name() {
			return GetRuleContexts<Interface_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_nameContext interface_name(int i) {
			return GetRuleContext<Interface_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRUNCATABLE() { return GetToken(IDLParser.KW_TRUNCATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public Value_inheritance_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_inheritance_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterValue_inheritance_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitValue_inheritance_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_inheritance_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_inheritance_specContext value_inheritance_spec() {
		Value_inheritance_specContext _localctx = new Value_inheritance_specContext(Context, State);
		EnterRule(_localctx, 36, RULE_value_inheritance_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 528;
				Match(COLON);
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_TRUNCATABLE) {
					{
					State = 529;
					Match(KW_TRUNCATABLE);
					}
				}

				State = 532;
				value_name();
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 533;
					Match(COMMA);
					State = 534;
					value_name();
					}
					}
					State = 539;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_SUPPORTS) {
				{
				State = 542;
				Match(KW_SUPPORTS);
				State = 543;
				interface_name();
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 544;
					Match(COMMA);
					State = 545;
					interface_name();
					}
					}
					State = 550;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		public Value_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterValue_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitValue_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_nameContext value_name() {
		Value_nameContext _localctx = new Value_nameContext(Context, State);
		EnterRule(_localctx, 38, RULE_value_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			scoped_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_exportContext interface_export() {
			return GetRuleContext<Interface_exportContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public State_memberContext state_member() {
			return GetRuleContext<State_memberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Init_declContext init_decl() {
			return GetRuleContext<Init_declContext>(0);
		}
		public Value_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterValue_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitValue_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_elementContext value_element() {
		Value_elementContext _localctx = new Value_elementContext(Context, State);
		EnterRule(_localctx, 40, RULE_value_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 555;
				interface_export();
				}
				break;
			case 2:
				{
				State = 556;
				state_member();
				}
				break;
			case 3:
				{
				State = 557;
				init_decl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class State_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorsContext declarators() {
			return GetRuleContext<DeclaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(IDLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PUBLIC() { return GetToken(IDLParser.KW_PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PRIVATE() { return GetToken(IDLParser.KW_PRIVATE, 0); }
		public State_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterState_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitState_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitState_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public State_memberContext state_member() {
		State_memberContext _localctx = new State_memberContext(Context, State);
		EnterRule(_localctx, 42, RULE_state_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			annapps();
			State = 561;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_PRIVATE || _la==KW_PUBLIC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 562;
			type_spec();
			State = 563;
			declarators();
			State = 564;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FACTORY() { return GetToken(IDLParser.KW_FACTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(IDLParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(IDLParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(IDLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Init_param_declsContext init_param_decls() {
			return GetRuleContext<Init_param_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Raises_exprContext raises_expr() {
			return GetRuleContext<Raises_exprContext>(0);
		}
		public Init_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterInit_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitInit_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_declContext init_decl() {
		Init_declContext _localctx = new Init_declContext(Context, State);
		EnterRule(_localctx, 44, RULE_init_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			annapps();
			State = 567;
			Match(KW_FACTORY);
			State = 568;
			Match(ID);
			State = 569;
			Match(LEFT_BRACKET);
			State = 571;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==KW_IN) {
				{
				State = 570;
				init_param_decls();
				}
			}

			State = 573;
			Match(RIGHT_BRACKET);
			State = 575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_RAISES) {
				{
				State = 574;
				raises_expr();
				}
			}

			State = 577;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_param_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Init_param_declContext[] init_param_decl() {
			return GetRuleContexts<Init_param_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Init_param_declContext init_param_decl(int i) {
			return GetRuleContext<Init_param_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public Init_param_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_param_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterInit_param_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitInit_param_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_param_decls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_param_declsContext init_param_decls() {
		Init_param_declsContext _localctx = new Init_param_declsContext(Context, State);
		EnterRule(_localctx, 46, RULE_init_param_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			init_param_decl();
			State = 584;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 580;
				Match(COMMA);
				State = 581;
				init_param_decl();
				}
				}
				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_param_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Init_param_attributeContext init_param_attribute() {
			return GetRuleContext<Init_param_attributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_type_specContext param_type_spec() {
			return GetRuleContext<Param_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_declaratorContext simple_declarator() {
			return GetRuleContext<Simple_declaratorContext>(0);
		}
		public Init_param_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_param_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterInit_param_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitInit_param_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_param_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_param_declContext init_param_decl() {
		Init_param_declContext _localctx = new Init_param_declContext(Context, State);
		EnterRule(_localctx, 48, RULE_init_param_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			annapps();
			State = 588;
			init_param_attribute();
			State = 589;
			param_type_spec();
			State = 590;
			simple_declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_param_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(IDLParser.KW_IN, 0); }
		public Init_param_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_param_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterInit_param_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitInit_param_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_param_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_param_attributeContext init_param_attribute() {
		Init_param_attributeContext _localctx = new Init_param_attributeContext(Context, State);
		EnterRule(_localctx, 50, RULE_init_param_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			Match(KW_IN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONST() { return GetToken(IDLParser.KW_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Const_typeContext const_type() {
			return GetRuleContext<Const_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(IDLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Const_expContext const_exp() {
			return GetRuleContext<Const_expContext>(0);
		}
		public Const_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterConst_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitConst_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Const_declContext const_decl() {
		Const_declContext _localctx = new Const_declContext(Context, State);
		EnterRule(_localctx, 52, RULE_const_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			annapps();
			State = 595;
			Match(KW_CONST);
			State = 596;
			const_type();
			State = 597;
			Match(ID);
			State = 598;
			Match(EQUAL);
			State = 599;
			const_exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Integer_typeContext integer_type() {
			return GetRuleContext<Integer_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_typeContext char_type() {
			return GetRuleContext<Char_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wide_char_typeContext wide_char_type() {
			return GetRuleContext<Wide_char_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_typeContext boolean_type() {
			return GetRuleContext<Boolean_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Floating_pt_typeContext floating_pt_type() {
			return GetRuleContext<Floating_pt_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_typeContext string_type() {
			return GetRuleContext<String_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wide_string_typeContext wide_string_type() {
			return GetRuleContext<Wide_string_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_pt_const_typeContext fixed_pt_const_type() {
			return GetRuleContext<Fixed_pt_const_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Octet_typeContext octet_type() {
			return GetRuleContext<Octet_typeContext>(0);
		}
		public Const_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterConst_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitConst_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Const_typeContext const_type() {
		Const_typeContext _localctx = new Const_typeContext(Context, State);
		EnterRule(_localctx, 54, RULE_const_type);
		try {
			State = 611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 601;
				integer_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 602;
				char_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 603;
				wide_char_type();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 604;
				boolean_type();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 605;
				floating_pt_type();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 606;
				string_type();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 607;
				wide_string_type();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 608;
				fixed_pt_const_type();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 609;
				scoped_name();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 610;
				octet_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_expContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_exprContext or_expr() {
			return GetRuleContext<Or_exprContext>(0);
		}
		public Const_expContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterConst_exp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitConst_exp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst_exp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Const_expContext const_exp() {
		Const_expContext _localctx = new Const_expContext(Context, State);
		EnterRule(_localctx, 56, RULE_const_exp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			or_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xor_exprContext[] xor_expr() {
			return GetRuleContexts<Xor_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xor_exprContext xor_expr(int i) {
			return GetRuleContext<Xor_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(IDLParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(IDLParser.PIPE, i);
		}
		public Or_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterOr_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitOr_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_exprContext or_expr() {
		Or_exprContext _localctx = new Or_exprContext(Context, State);
		EnterRule(_localctx, 58, RULE_or_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			xor_expr();
			State = 620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PIPE) {
				{
				{
				State = 616;
				Match(PIPE);
				State = 617;
				xor_expr();
				}
				}
				State = 622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xor_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext[] and_expr() {
			return GetRuleContexts<And_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext and_expr(int i) {
			return GetRuleContext<And_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(IDLParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(IDLParser.CARET, i);
		}
		public Xor_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xor_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterXor_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitXor_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXor_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xor_exprContext xor_expr() {
		Xor_exprContext _localctx = new Xor_exprContext(Context, State);
		EnterRule(_localctx, 60, RULE_xor_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			and_expr();
			State = 628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CARET) {
				{
				{
				State = 624;
				Match(CARET);
				State = 625;
				and_expr();
				}
				}
				State = 630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_exprContext[] shift_expr() {
			return GetRuleContexts<Shift_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_exprContext shift_expr(int i) {
			return GetRuleContext<Shift_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMPERSAND() { return GetTokens(IDLParser.AMPERSAND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND(int i) {
			return GetToken(IDLParser.AMPERSAND, i);
		}
		public And_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAnd_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAnd_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_exprContext and_expr() {
		And_exprContext _localctx = new And_exprContext(Context, State);
		EnterRule(_localctx, 62, RULE_and_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			shift_expr();
			State = 636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AMPERSAND) {
				{
				{
				State = 632;
				Match(AMPERSAND);
				State = 633;
				shift_expr();
				}
				}
				State = 638;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_exprContext[] add_expr() {
			return GetRuleContexts<Add_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_exprContext add_expr(int i) {
			return GetRuleContext<Add_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHT_SHIFT() { return GetTokens(IDLParser.RIGHT_SHIFT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SHIFT(int i) {
			return GetToken(IDLParser.RIGHT_SHIFT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFT_SHIFT() { return GetTokens(IDLParser.LEFT_SHIFT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SHIFT(int i) {
			return GetToken(IDLParser.LEFT_SHIFT, i);
		}
		public Shift_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterShift_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitShift_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_exprContext shift_expr() {
		Shift_exprContext _localctx = new Shift_exprContext(Context, State);
		EnterRule(_localctx, 64, RULE_shift_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			add_expr();
			State = 644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==RIGHT_SHIFT || _la==LEFT_SHIFT) {
				{
				{
				State = 640;
				_la = TokenStream.LA(1);
				if ( !(_la==RIGHT_SHIFT || _la==LEFT_SHIFT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 641;
				add_expr();
				}
				}
				State = 646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext[] mult_expr() {
			return GetRuleContexts<Mult_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext mult_expr(int i) {
			return GetRuleContext<Mult_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(IDLParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(IDLParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(IDLParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(IDLParser.MINUS, i);
		}
		public Add_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAdd_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAdd_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_exprContext add_expr() {
		Add_exprContext _localctx = new Add_exprContext(Context, State);
		EnterRule(_localctx, 66, RULE_add_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			mult_expr();
			State = 652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 648;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 649;
				mult_expr();
				}
				}
				State = 654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mult_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext[] unary_expr() {
			return GetRuleContexts<Unary_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr(int i) {
			return GetRuleContext<Unary_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(IDLParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(IDLParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(IDLParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(IDLParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(IDLParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(IDLParser.PERCENT, i);
		}
		public Mult_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterMult_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitMult_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMult_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mult_exprContext mult_expr() {
		Mult_exprContext _localctx = new Mult_exprContext(Context, State);
		EnterRule(_localctx, 68, RULE_mult_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			unary_expr();
			State = 660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2166358016L) != 0)) {
				{
				{
				State = 656;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2166358016L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 657;
				unary_expr();
				}
				}
				State = 662;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primary_exprContext primary_expr() {
			return GetRuleContext<Primary_exprContext>(0);
		}
		public Unary_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterUnary_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitUnary_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_exprContext unary_expr() {
		Unary_exprContext _localctx = new Unary_exprContext(Context, State);
		EnterRule(_localctx, 70, RULE_unary_expr);
		try {
			State = 667;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TILDE:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 663;
				unary_operator();
				State = 664;
				primary_expr();
				}
				break;
			case INTEGER_LITERAL:
			case OCTAL_LITERAL:
			case HEX_LITERAL:
			case FLOATING_PT_LITERAL:
			case FIXED_PT_LITERAL:
			case WIDE_CHARACTER_LITERAL:
			case CHARACTER_LITERAL:
			case WIDE_STRING_LITERAL:
			case STRING_LITERAL:
			case BOOLEAN_LITERAL:
			case LEFT_BRACKET:
			case DOUBLE_COLON:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 666;
				primary_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(IDLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(IDLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(IDLParser.TILDE, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 72, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 101711872L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(IDLParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Const_expContext const_exp() {
			return GetRuleContext<Const_expContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(IDLParser.RIGHT_BRACKET, 0); }
		public Primary_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPrimary_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPrimary_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_exprContext primary_expr() {
		Primary_exprContext _localctx = new Primary_exprContext(Context, State);
		EnterRule(_localctx, 74, RULE_primary_expr);
		try {
			State = 677;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE_COLON:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 671;
				scoped_name();
				}
				break;
			case INTEGER_LITERAL:
			case OCTAL_LITERAL:
			case HEX_LITERAL:
			case FLOATING_PT_LITERAL:
			case FIXED_PT_LITERAL:
			case WIDE_CHARACTER_LITERAL:
			case CHARACTER_LITERAL:
			case WIDE_STRING_LITERAL:
			case STRING_LITERAL:
			case BOOLEAN_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 672;
				literal();
				}
				break;
			case LEFT_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 673;
				Match(LEFT_BRACKET);
				State = 674;
				const_exp();
				State = 675;
				Match(RIGHT_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LITERAL() { return GetToken(IDLParser.HEX_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(IDLParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_LITERAL() { return GetToken(IDLParser.OCTAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(IDLParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WIDE_STRING_LITERAL() { return GetToken(IDLParser.WIDE_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(IDLParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WIDE_CHARACTER_LITERAL() { return GetToken(IDLParser.WIDE_CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_PT_LITERAL() { return GetToken(IDLParser.FIXED_PT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATING_PT_LITERAL() { return GetToken(IDLParser.FLOATING_PT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(IDLParser.BOOLEAN_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 76, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2046L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Positive_int_constContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Const_expContext const_exp() {
			return GetRuleContext<Const_expContext>(0);
		}
		public Positive_int_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positive_int_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPositive_int_const(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPositive_int_const(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositive_int_const(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Positive_int_constContext positive_int_const() {
		Positive_int_constContext _localctx = new Positive_int_constContext(Context, State);
		EnterRule(_localctx, 78, RULE_positive_int_const);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			const_exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_defContext type_def() {
			return GetRuleContext<Type_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_typeContext struct_type() {
			return GetRuleContext<Struct_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Union_typeContext union_type() {
			return GetRuleContext<Union_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_typeContext enum_type() {
			return GetRuleContext<Enum_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitset_typeContext bitset_type() {
			return GetRuleContext<Bitset_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitmask_typeContext bitmask_type() {
			return GetRuleContext<Bitmask_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Native_typeContext native_type() {
			return GetRuleContext<Native_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constr_forward_declContext constr_forward_decl() {
			return GetRuleContext<Constr_forward_declContext>(0);
		}
		public Type_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterType_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitType_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declContext type_decl() {
		Type_declContext _localctx = new Type_declContext(Context, State);
		EnterRule(_localctx, 80, RULE_type_decl);
		try {
			State = 691;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 683;
				type_def();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 684;
				struct_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 685;
				union_type();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 686;
				enum_type();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 687;
				bitset_type();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 688;
				bitmask_type();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 689;
				native_type();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 690;
				constr_forward_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TYPEDEF() { return GetToken(IDLParser.KW_TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_declaratorContext type_declarator() {
			return GetRuleContext<Type_declaratorContext>(0);
		}
		public Type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterType_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitType_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_defContext type_def() {
		Type_defContext _localctx = new Type_defContext(Context, State);
		EnterRule(_localctx, 82, RULE_type_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			annapps();
			State = 694;
			Match(KW_TYPEDEF);
			State = 695;
			type_declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NATIVE() { return GetToken(IDLParser.KW_NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_declaratorsContext simple_declarators() {
			return GetRuleContext<Simple_declaratorsContext>(0);
		}
		public Native_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterNative_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitNative_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNative_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Native_typeContext native_type() {
		Native_typeContext _localctx = new Native_typeContext(Context, State);
		EnterRule(_localctx, 84, RULE_native_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			annapps();
			State = 698;
			Match(KW_NATIVE);
			State = 699;
			simple_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorsContext declarators() {
			return GetRuleContext<DeclaratorsContext>(0);
		}
		public Type_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterType_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitType_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declaratorContext type_declarator() {
		Type_declaratorContext _localctx = new Type_declaratorContext(Context, State);
		EnterRule(_localctx, 86, RULE_type_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			type_spec();
			State = 702;
			declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_type_specContext simple_type_spec() {
			return GetRuleContext<Simple_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constr_type_specContext constr_type_spec() {
			return GetRuleContext<Constr_type_specContext>(0);
		}
		public Type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterType_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitType_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_specContext type_spec() {
		Type_specContext _localctx = new Type_specContext(Context, State);
		EnterRule(_localctx, 88, RULE_type_spec);
		try {
			State = 706;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE_COLON:
			case KW_STRING:
			case KW_OCTET:
			case KW_SEQUENCE:
			case KW_WCHAR:
			case KW_SHORT:
			case KW_LONG:
			case KW_WSTRING:
			case KW_VALUEBASE:
			case KW_OBJECT:
			case KW_UNSIGNED:
			case KW_FIXED:
			case KW_ANY:
			case KW_CHAR:
			case KW_FLOAT:
			case KW_BOOLEAN:
			case KW_DOUBLE:
			case KW_MAP:
			case KW_INT8:
			case KW_UINT8:
			case KW_INT16:
			case KW_UINT16:
			case KW_INT32:
			case KW_UINT32:
			case KW_INT64:
			case KW_UINT64:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 704;
				simple_type_spec();
				}
				break;
			case AT:
			case KW_STRUCT:
			case KW_ENUM:
			case KW_UNION:
			case KW_BITSET:
			case KW_BITMASK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 705;
				constr_type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_type_specContext base_type_spec() {
			return GetRuleContext<Base_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_type_specContext template_type_spec() {
			return GetRuleContext<Template_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		public Simple_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterSimple_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitSimple_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_type_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_type_specContext simple_type_spec() {
		Simple_type_specContext _localctx = new Simple_type_specContext(Context, State);
		EnterRule(_localctx, 90, RULE_simple_type_spec);
		try {
			State = 711;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_OCTET:
			case KW_WCHAR:
			case KW_SHORT:
			case KW_LONG:
			case KW_VALUEBASE:
			case KW_OBJECT:
			case KW_UNSIGNED:
			case KW_ANY:
			case KW_CHAR:
			case KW_FLOAT:
			case KW_BOOLEAN:
			case KW_DOUBLE:
			case KW_INT8:
			case KW_UINT8:
			case KW_INT16:
			case KW_UINT16:
			case KW_INT32:
			case KW_UINT32:
			case KW_INT64:
			case KW_UINT64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 708;
				base_type_spec();
				}
				break;
			case KW_STRING:
			case KW_SEQUENCE:
			case KW_WSTRING:
			case KW_FIXED:
			case KW_MAP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 709;
				template_type_spec();
				}
				break;
			case DOUBLE_COLON:
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 710;
				scoped_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitfield_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Integer_typeContext integer_type() {
			return GetRuleContext<Integer_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_typeContext boolean_type() {
			return GetRuleContext<Boolean_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Octet_typeContext octet_type() {
			return GetRuleContext<Octet_typeContext>(0);
		}
		public Bitfield_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitfield_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterBitfield_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitBitfield_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitfield_type_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitfield_type_specContext bitfield_type_spec() {
		Bitfield_type_specContext _localctx = new Bitfield_type_specContext(Context, State);
		EnterRule(_localctx, 92, RULE_bitfield_type_spec);
		try {
			State = 716;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_SHORT:
			case KW_LONG:
			case KW_UNSIGNED:
			case KW_INT8:
			case KW_UINT8:
			case KW_INT16:
			case KW_UINT16:
			case KW_INT32:
			case KW_UINT32:
			case KW_INT64:
			case KW_UINT64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 713;
				integer_type();
				}
				break;
			case KW_BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 714;
				boolean_type();
				}
				break;
			case KW_OCTET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 715;
				octet_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Floating_pt_typeContext floating_pt_type() {
			return GetRuleContext<Floating_pt_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Integer_typeContext integer_type() {
			return GetRuleContext<Integer_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_typeContext char_type() {
			return GetRuleContext<Char_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wide_char_typeContext wide_char_type() {
			return GetRuleContext<Wide_char_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_typeContext boolean_type() {
			return GetRuleContext<Boolean_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Octet_typeContext octet_type() {
			return GetRuleContext<Octet_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_typeContext object_type() {
			return GetRuleContext<Object_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_base_typeContext value_base_type() {
			return GetRuleContext<Value_base_typeContext>(0);
		}
		public Base_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterBase_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitBase_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_type_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_type_specContext base_type_spec() {
		Base_type_specContext _localctx = new Base_type_specContext(Context, State);
		EnterRule(_localctx, 94, RULE_base_type_spec);
		try {
			State = 727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 718;
				floating_pt_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 719;
				integer_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 720;
				char_type();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 721;
				wide_char_type();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 722;
				boolean_type();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 723;
				octet_type();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 724;
				any_type();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 725;
				object_type();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 726;
				value_base_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_typeContext sequence_type() {
			return GetRuleContext<Sequence_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Map_typeContext map_type() {
			return GetRuleContext<Map_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_typeContext string_type() {
			return GetRuleContext<String_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wide_string_typeContext wide_string_type() {
			return GetRuleContext<Wide_string_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_pt_typeContext fixed_pt_type() {
			return GetRuleContext<Fixed_pt_typeContext>(0);
		}
		public Template_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterTemplate_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitTemplate_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_type_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_type_specContext template_type_spec() {
		Template_type_specContext _localctx = new Template_type_specContext(Context, State);
		EnterRule(_localctx, 96, RULE_template_type_spec);
		try {
			State = 734;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_SEQUENCE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 729;
				sequence_type();
				}
				break;
			case KW_MAP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 730;
				map_type();
				}
				break;
			case KW_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 731;
				string_type();
				}
				break;
			case KW_WSTRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 732;
				wide_string_type();
				}
				break;
			case KW_FIXED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 733;
				fixed_pt_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constr_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_typeContext struct_type() {
			return GetRuleContext<Struct_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Union_typeContext union_type() {
			return GetRuleContext<Union_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_typeContext enum_type() {
			return GetRuleContext<Enum_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitset_typeContext bitset_type() {
			return GetRuleContext<Bitset_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitmask_typeContext bitmask_type() {
			return GetRuleContext<Bitmask_typeContext>(0);
		}
		public Constr_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constr_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterConstr_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitConstr_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstr_type_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constr_type_specContext constr_type_spec() {
		Constr_type_specContext _localctx = new Constr_type_specContext(Context, State);
		EnterRule(_localctx, 98, RULE_constr_type_spec);
		try {
			State = 741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 736;
				struct_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 737;
				union_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 738;
				enum_type();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 739;
				bitset_type();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 740;
				bitmask_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_declaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(IDLParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(IDLParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public Simple_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_declarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterSimple_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitSimple_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_declaratorsContext simple_declarators() {
		Simple_declaratorsContext _localctx = new Simple_declaratorsContext(Context, State);
		EnterRule(_localctx, 100, RULE_simple_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			Match(ID);
			State = 748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 744;
				Match(COMMA);
				State = 745;
				Match(ID);
				}
				}
				State = 750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext[] declarator() {
			return GetRuleContexts<DeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator(int i) {
			return GetRuleContext<DeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public DeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterDeclarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitDeclarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorsContext declarators() {
		DeclaratorsContext _localctx = new DeclaratorsContext(Context, State);
		EnterRule(_localctx, 102, RULE_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			declarator();
			State = 756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 752;
				Match(COMMA);
				State = 753;
				declarator();
				}
				}
				State = 758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_declaratorContext simple_declarator() {
			return GetRuleContext<Simple_declaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Complex_declaratorContext complex_declarator() {
			return GetRuleContext<Complex_declaratorContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 104, RULE_declarator);
		try {
			State = 761;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 759;
				simple_declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 760;
				complex_declarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		public Simple_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterSimple_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitSimple_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_declaratorContext simple_declarator() {
		Simple_declaratorContext _localctx = new Simple_declaratorContext(Context, State);
		EnterRule(_localctx, 106, RULE_simple_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complex_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_declaratorContext array_declarator() {
			return GetRuleContext<Array_declaratorContext>(0);
		}
		public Complex_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterComplex_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitComplex_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplex_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Complex_declaratorContext complex_declarator() {
		Complex_declaratorContext _localctx = new Complex_declaratorContext(Context, State);
		EnterRule(_localctx, 108, RULE_complex_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			array_declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_pt_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FLOAT() { return GetToken(IDLParser.KW_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DOUBLE() { return GetToken(IDLParser.KW_DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LONG() { return GetToken(IDLParser.KW_LONG, 0); }
		public Floating_pt_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_pt_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterFloating_pt_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitFloating_pt_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_pt_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_pt_typeContext floating_pt_type() {
		Floating_pt_typeContext _localctx = new Floating_pt_typeContext(Context, State);
		EnterRule(_localctx, 110, RULE_floating_pt_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_FLOAT:
				{
				State = 767;
				Match(KW_FLOAT);
				}
				break;
			case KW_DOUBLE:
				{
				State = 768;
				Match(KW_DOUBLE);
				}
				break;
			case KW_LONG:
				{
				State = 769;
				Match(KW_LONG);
				State = 770;
				Match(KW_DOUBLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_intContext signed_int() {
			return GetRuleContext<Signed_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unsigned_intContext unsigned_int() {
			return GetRuleContext<Unsigned_intContext>(0);
		}
		public Integer_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterInteger_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitInteger_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integer_typeContext integer_type() {
		Integer_typeContext _localctx = new Integer_typeContext(Context, State);
		EnterRule(_localctx, 112, RULE_integer_type);
		try {
			State = 775;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_SHORT:
			case KW_LONG:
			case KW_INT8:
			case KW_INT16:
			case KW_INT32:
			case KW_INT64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 773;
				signed_int();
				}
				break;
			case KW_UNSIGNED:
			case KW_UINT8:
			case KW_UINT16:
			case KW_UINT32:
			case KW_UINT64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 774;
				unsigned_int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_intContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_short_intContext signed_short_int() {
			return GetRuleContext<Signed_short_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signed_long_intContext signed_long_int() {
			return GetRuleContext<Signed_long_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signed_longlong_intContext signed_longlong_int() {
			return GetRuleContext<Signed_longlong_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signed_tiny_intContext signed_tiny_int() {
			return GetRuleContext<Signed_tiny_intContext>(0);
		}
		public Signed_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterSigned_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitSigned_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_int(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_intContext signed_int() {
		Signed_intContext _localctx = new Signed_intContext(Context, State);
		EnterRule(_localctx, 114, RULE_signed_int);
		try {
			State = 781;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 777;
				signed_short_int();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 778;
				signed_long_int();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 779;
				signed_longlong_int();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 780;
				signed_tiny_int();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_tiny_intContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INT8() { return GetToken(IDLParser.KW_INT8, 0); }
		public Signed_tiny_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_tiny_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterSigned_tiny_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitSigned_tiny_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_tiny_int(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_tiny_intContext signed_tiny_int() {
		Signed_tiny_intContext _localctx = new Signed_tiny_intContext(Context, State);
		EnterRule(_localctx, 116, RULE_signed_tiny_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			Match(KW_INT8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_short_intContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHORT() { return GetToken(IDLParser.KW_SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INT16() { return GetToken(IDLParser.KW_INT16, 0); }
		public Signed_short_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_short_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterSigned_short_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitSigned_short_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_short_int(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_short_intContext signed_short_int() {
		Signed_short_intContext _localctx = new Signed_short_intContext(Context, State);
		EnterRule(_localctx, 118, RULE_signed_short_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_SHORT || _la==KW_INT16) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_long_intContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LONG() { return GetToken(IDLParser.KW_LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INT32() { return GetToken(IDLParser.KW_INT32, 0); }
		public Signed_long_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_long_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterSigned_long_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitSigned_long_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_long_int(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_long_intContext signed_long_int() {
		Signed_long_intContext _localctx = new Signed_long_intContext(Context, State);
		EnterRule(_localctx, 120, RULE_signed_long_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_LONG || _la==KW_INT32) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_longlong_intContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_LONG() { return GetTokens(IDLParser.KW_LONG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LONG(int i) {
			return GetToken(IDLParser.KW_LONG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INT64() { return GetToken(IDLParser.KW_INT64, 0); }
		public Signed_longlong_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_longlong_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterSigned_longlong_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitSigned_longlong_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_longlong_int(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_longlong_intContext signed_longlong_int() {
		Signed_longlong_intContext _localctx = new Signed_longlong_intContext(Context, State);
		EnterRule(_localctx, 122, RULE_signed_longlong_int);
		try {
			State = 792;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_LONG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 789;
				Match(KW_LONG);
				State = 790;
				Match(KW_LONG);
				}
				break;
			case KW_INT64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 791;
				Match(KW_INT64);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unsigned_intContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unsigned_short_intContext unsigned_short_int() {
			return GetRuleContext<Unsigned_short_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unsigned_long_intContext unsigned_long_int() {
			return GetRuleContext<Unsigned_long_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unsigned_longlong_intContext unsigned_longlong_int() {
			return GetRuleContext<Unsigned_longlong_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unsigned_tiny_intContext unsigned_tiny_int() {
			return GetRuleContext<Unsigned_tiny_intContext>(0);
		}
		public Unsigned_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsigned_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterUnsigned_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitUnsigned_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsigned_int(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unsigned_intContext unsigned_int() {
		Unsigned_intContext _localctx = new Unsigned_intContext(Context, State);
		EnterRule(_localctx, 124, RULE_unsigned_int);
		try {
			State = 798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 794;
				unsigned_short_int();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 795;
				unsigned_long_int();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 796;
				unsigned_longlong_int();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 797;
				unsigned_tiny_int();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unsigned_tiny_intContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UINT8() { return GetToken(IDLParser.KW_UINT8, 0); }
		public Unsigned_tiny_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsigned_tiny_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterUnsigned_tiny_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitUnsigned_tiny_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsigned_tiny_int(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unsigned_tiny_intContext unsigned_tiny_int() {
		Unsigned_tiny_intContext _localctx = new Unsigned_tiny_intContext(Context, State);
		EnterRule(_localctx, 126, RULE_unsigned_tiny_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			Match(KW_UINT8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unsigned_short_intContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSIGNED() { return GetToken(IDLParser.KW_UNSIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHORT() { return GetToken(IDLParser.KW_SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UINT16() { return GetToken(IDLParser.KW_UINT16, 0); }
		public Unsigned_short_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsigned_short_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterUnsigned_short_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitUnsigned_short_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsigned_short_int(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unsigned_short_intContext unsigned_short_int() {
		Unsigned_short_intContext _localctx = new Unsigned_short_intContext(Context, State);
		EnterRule(_localctx, 128, RULE_unsigned_short_int);
		try {
			State = 805;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_UNSIGNED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 802;
				Match(KW_UNSIGNED);
				State = 803;
				Match(KW_SHORT);
				}
				break;
			case KW_UINT16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 804;
				Match(KW_UINT16);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unsigned_long_intContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSIGNED() { return GetToken(IDLParser.KW_UNSIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LONG() { return GetToken(IDLParser.KW_LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UINT32() { return GetToken(IDLParser.KW_UINT32, 0); }
		public Unsigned_long_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsigned_long_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterUnsigned_long_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitUnsigned_long_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsigned_long_int(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unsigned_long_intContext unsigned_long_int() {
		Unsigned_long_intContext _localctx = new Unsigned_long_intContext(Context, State);
		EnterRule(_localctx, 130, RULE_unsigned_long_int);
		try {
			State = 810;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_UNSIGNED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 807;
				Match(KW_UNSIGNED);
				State = 808;
				Match(KW_LONG);
				}
				break;
			case KW_UINT32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 809;
				Match(KW_UINT32);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unsigned_longlong_intContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSIGNED() { return GetToken(IDLParser.KW_UNSIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_LONG() { return GetTokens(IDLParser.KW_LONG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LONG(int i) {
			return GetToken(IDLParser.KW_LONG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UINT64() { return GetToken(IDLParser.KW_UINT64, 0); }
		public Unsigned_longlong_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsigned_longlong_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterUnsigned_longlong_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitUnsigned_longlong_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsigned_longlong_int(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unsigned_longlong_intContext unsigned_longlong_int() {
		Unsigned_longlong_intContext _localctx = new Unsigned_longlong_intContext(Context, State);
		EnterRule(_localctx, 132, RULE_unsigned_longlong_int);
		try {
			State = 816;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_UNSIGNED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 812;
				Match(KW_UNSIGNED);
				State = 813;
				Match(KW_LONG);
				State = 814;
				Match(KW_LONG);
				}
				break;
			case KW_UINT64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 815;
				Match(KW_UINT64);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CHAR() { return GetToken(IDLParser.KW_CHAR, 0); }
		public Char_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterChar_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitChar_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChar_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Char_typeContext char_type() {
		Char_typeContext _localctx = new Char_typeContext(Context, State);
		EnterRule(_localctx, 134, RULE_char_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			Match(KW_CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wide_char_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WCHAR() { return GetToken(IDLParser.KW_WCHAR, 0); }
		public Wide_char_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wide_char_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterWide_char_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitWide_char_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWide_char_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wide_char_typeContext wide_char_type() {
		Wide_char_typeContext _localctx = new Wide_char_typeContext(Context, State);
		EnterRule(_localctx, 136, RULE_wide_char_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			Match(KW_WCHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BOOLEAN() { return GetToken(IDLParser.KW_BOOLEAN, 0); }
		public Boolean_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterBoolean_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitBoolean_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_typeContext boolean_type() {
		Boolean_typeContext _localctx = new Boolean_typeContext(Context, State);
		EnterRule(_localctx, 138, RULE_boolean_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822;
			Match(KW_BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Octet_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OCTET() { return GetToken(IDLParser.KW_OCTET, 0); }
		public Octet_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_octet_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterOctet_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitOctet_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOctet_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Octet_typeContext octet_type() {
		Octet_typeContext _localctx = new Octet_typeContext(Context, State);
		EnterRule(_localctx, 140, RULE_octet_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824;
			Match(KW_OCTET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ANY() { return GetToken(IDLParser.KW_ANY, 0); }
		public Any_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAny_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAny_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_typeContext any_type() {
		Any_typeContext _localctx = new Any_typeContext(Context, State);
		EnterRule(_localctx, 142, RULE_any_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826;
			Match(KW_ANY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OBJECT() { return GetToken(IDLParser.KW_OBJECT, 0); }
		public Object_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterObject_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitObject_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_typeContext object_type() {
		Object_typeContext _localctx = new Object_typeContext(Context, State);
		EnterRule(_localctx, 144, RULE_object_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 828;
			Match(KW_OBJECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_defContext annotation_def() {
			return GetRuleContext<Annotation_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_forward_dclContext annotation_forward_dcl() {
			return GetRuleContext<Annotation_forward_dclContext>(0);
		}
		public Annotation_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAnnotation_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAnnotation_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_declContext annotation_decl() {
		Annotation_declContext _localctx = new Annotation_declContext(Context, State);
		EnterRule(_localctx, 146, RULE_annotation_decl);
		try {
			State = 832;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 830;
				annotation_def();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 831;
				annotation_forward_dcl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_headerContext annotation_header() {
			return GetRuleContext<Annotation_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_bodyContext annotation_body() {
			return GetRuleContext<Annotation_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		public Annotation_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAnnotation_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAnnotation_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_defContext annotation_def() {
		Annotation_defContext _localctx = new Annotation_defContext(Context, State);
		EnterRule(_localctx, 148, RULE_annotation_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834;
			annotation_header();
			State = 835;
			Match(LEFT_BRACE);
			State = 836;
			annotation_body();
			State = 837;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AT_ANNOTATION() { return GetToken(IDLParser.KW_AT_ANNOTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_inheritance_specContext annotation_inheritance_spec() {
			return GetRuleContext<Annotation_inheritance_specContext>(0);
		}
		public Annotation_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAnnotation_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAnnotation_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_headerContext annotation_header() {
		Annotation_headerContext _localctx = new Annotation_headerContext(Context, State);
		EnterRule(_localctx, 150, RULE_annotation_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			Match(KW_AT_ANNOTATION);
			State = 840;
			Match(ID);
			State = 842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 841;
				annotation_inheritance_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_inheritance_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(IDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		public Annotation_inheritance_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_inheritance_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAnnotation_inheritance_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAnnotation_inheritance_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_inheritance_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_inheritance_specContext annotation_inheritance_spec() {
		Annotation_inheritance_specContext _localctx = new Annotation_inheritance_specContext(Context, State);
		EnterRule(_localctx, 152, RULE_annotation_inheritance_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844;
			Match(COLON);
			State = 845;
			scoped_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_exportContext[] annotation_export() {
			return GetRuleContexts<Annotation_exportContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_exportContext annotation_export(int i) {
			return GetRuleContext<Annotation_exportContext>(i);
		}
		public Annotation_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAnnotation_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAnnotation_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_bodyContext annotation_body() {
		Annotation_bodyContext _localctx = new Annotation_bodyContext(Context, State);
		EnterRule(_localctx, 154, RULE_annotation_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2161652465936629760L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 421662847033409L) != 0)) {
				{
				{
				State = 847;
				annotation_export();
				}
				}
				State = 852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_exportContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_memberContext annotation_member() {
			return GetRuleContext<Annotation_memberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_typeContext enum_type() {
			return GetRuleContext<Enum_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(IDLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Const_declContext const_decl() {
			return GetRuleContext<Const_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_defContext type_def() {
			return GetRuleContext<Type_defContext>(0);
		}
		public Annotation_exportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_export; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAnnotation_export(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAnnotation_export(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_export(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_exportContext annotation_export() {
		Annotation_exportContext _localctx = new Annotation_exportContext(Context, State);
		EnterRule(_localctx, 156, RULE_annotation_export);
		try {
			State = 863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 853;
				annotation_member();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 854;
				enum_type();
				State = 855;
				Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 857;
				const_decl();
				State = 858;
				Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 860;
				type_def();
				State = 861;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_member_typeContext annotation_member_type() {
			return GetRuleContext<Annotation_member_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_declaratorContext simple_declarator() {
			return GetRuleContext<Simple_declaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(IDLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEFAULT() { return GetToken(IDLParser.KW_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Const_expContext const_exp() {
			return GetRuleContext<Const_expContext>(0);
		}
		public Annotation_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAnnotation_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAnnotation_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_memberContext annotation_member() {
		Annotation_memberContext _localctx = new Annotation_memberContext(Context, State);
		EnterRule(_localctx, 158, RULE_annotation_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 865;
			annotation_member_type();
			State = 866;
			simple_declarator();
			State = 869;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_DEFAULT) {
				{
				State = 867;
				Match(KW_DEFAULT);
				State = 868;
				const_exp();
				}
			}

			State = 871;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_member_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Const_typeContext const_type() {
			return GetRuleContext<Const_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_typeContext any_type() {
			return GetRuleContext<Any_typeContext>(0);
		}
		public Annotation_member_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_member_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAnnotation_member_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAnnotation_member_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_member_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_member_typeContext annotation_member_type() {
		Annotation_member_typeContext _localctx = new Annotation_member_typeContext(Context, State);
		EnterRule(_localctx, 160, RULE_annotation_member_type);
		try {
			State = 875;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE_COLON:
			case KW_STRING:
			case KW_OCTET:
			case KW_WCHAR:
			case KW_SHORT:
			case KW_LONG:
			case KW_WSTRING:
			case KW_UNSIGNED:
			case KW_FIXED:
			case KW_CHAR:
			case KW_FLOAT:
			case KW_BOOLEAN:
			case KW_DOUBLE:
			case KW_INT8:
			case KW_UINT8:
			case KW_INT16:
			case KW_UINT16:
			case KW_INT32:
			case KW_UINT32:
			case KW_INT64:
			case KW_UINT64:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 873;
				const_type();
				}
				break;
			case KW_ANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 874;
				any_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_forward_dclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AT_ANNOTATION() { return GetToken(IDLParser.KW_AT_ANNOTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		public Annotation_forward_dclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_forward_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAnnotation_forward_dcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAnnotation_forward_dcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_forward_dcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_forward_dclContext annotation_forward_dcl() {
		Annotation_forward_dclContext _localctx = new Annotation_forward_dclContext(Context, State);
		EnterRule(_localctx, 162, RULE_annotation_forward_dcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 877;
			Match(KW_AT_ANNOTATION);
			State = 878;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitset_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BITSET() { return GetToken(IDLParser.KW_BITSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(IDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitfieldContext[] bitfield() {
			return GetRuleContexts<BitfieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitfieldContext bitfield(int i) {
			return GetRuleContext<BitfieldContext>(i);
		}
		public Bitset_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitset_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterBitset_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitBitset_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitset_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitset_typeContext bitset_type() {
		Bitset_typeContext _localctx = new Bitset_typeContext(Context, State);
		EnterRule(_localctx, 164, RULE_bitset_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 880;
			annapps();
			State = 881;
			Match(KW_BITSET);
			State = 882;
			Match(ID);
			State = 885;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 883;
				Match(COLON);
				State = 884;
				scoped_name();
				}
			}

			State = 887;
			Match(LEFT_BRACE);
			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 888;
				bitfield();
				}
				}
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AT || _la==KW_BITFIELD );
			State = 893;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitfieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bitfield_specContext bitfield_spec() {
			return GetRuleContext<Bitfield_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(IDLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_declaratorsContext simple_declarators() {
			return GetRuleContext<Simple_declaratorsContext>(0);
		}
		public BitfieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitfield; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterBitfield(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitBitfield(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitfield(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitfieldContext bitfield() {
		BitfieldContext _localctx = new BitfieldContext(Context, State);
		EnterRule(_localctx, 166, RULE_bitfield);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 895;
			bitfield_spec();
			State = 897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 896;
				simple_declarators();
				}
			}

			State = 899;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitfield_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BITFIELD() { return GetToken(IDLParser.KW_BITFIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANG_BRACKET() { return GetToken(IDLParser.LEFT_ANG_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Positive_int_constContext positive_int_const() {
			return GetRuleContext<Positive_int_constContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANG_BRACKET() { return GetToken(IDLParser.RIGHT_ANG_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(IDLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bitfield_type_specContext bitfield_type_spec() {
			return GetRuleContext<Bitfield_type_specContext>(0);
		}
		public Bitfield_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitfield_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterBitfield_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitBitfield_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitfield_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitfield_specContext bitfield_spec() {
		Bitfield_specContext _localctx = new Bitfield_specContext(Context, State);
		EnterRule(_localctx, 168, RULE_bitfield_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901;
			annapps();
			State = 902;
			Match(KW_BITFIELD);
			State = 903;
			Match(LEFT_ANG_BRACKET);
			State = 904;
			positive_int_const();
			State = 907;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 905;
				Match(COMMA);
				State = 906;
				bitfield_type_spec();
				}
			}

			State = 909;
			Match(RIGHT_ANG_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitmask_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BITMASK() { return GetToken(IDLParser.KW_BITMASK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bit_valueContext[] bit_value() {
			return GetRuleContexts<Bit_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bit_valueContext bit_value(int i) {
			return GetRuleContext<Bit_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public Bitmask_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitmask_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterBitmask_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitBitmask_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitmask_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitmask_typeContext bitmask_type() {
		Bitmask_typeContext _localctx = new Bitmask_typeContext(Context, State);
		EnterRule(_localctx, 170, RULE_bitmask_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			annapps();
			State = 912;
			Match(KW_BITMASK);
			State = 913;
			Match(ID);
			State = 914;
			Match(LEFT_BRACE);
			State = 915;
			bit_value();
			State = 920;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 916;
				Match(COMMA);
				State = 917;
				bit_value();
				}
				}
				State = 922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 923;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		public Bit_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterBit_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitBit_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBit_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bit_valueContext bit_value() {
		Bit_valueContext _localctx = new Bit_valueContext(Context, State);
		EnterRule(_localctx, 172, RULE_bit_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			annapps();
			State = 926;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STRUCT() { return GetToken(IDLParser.KW_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_listContext member_list() {
			return GetRuleContext<Member_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(IDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		public Struct_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterStruct_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitStruct_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_typeContext struct_type() {
		Struct_typeContext _localctx = new Struct_typeContext(Context, State);
		EnterRule(_localctx, 174, RULE_struct_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			annapps();
			State = 929;
			Match(KW_STRUCT);
			State = 930;
			Match(ID);
			State = 933;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 931;
				Match(COLON);
				State = 932;
				scoped_name();
				}
			}

			State = 935;
			Match(LEFT_BRACE);
			State = 936;
			member_list();
			State = 937;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public Member_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterMember_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitMember_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_listContext member_list() {
		Member_listContext _localctx = new Member_listContext(Context, State);
		EnterRule(_localctx, 176, RULE_member_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2160953176541364224L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 422109523667073L) != 0)) {
				{
				{
				State = 939;
				member();
				}
				}
				State = 944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorsContext declarators() {
			return GetRuleContext<DeclaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(IDLParser.SEMICOLON, 0); }
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 178, RULE_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 945;
			annapps();
			State = 946;
			type_spec();
			State = 947;
			declarators();
			State = 948;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNION() { return GetToken(IDLParser.KW_UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SWITCH() { return GetToken(IDLParser.KW_SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(IDLParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_type_specContext switch_type_spec() {
			return GetRuleContext<Switch_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(IDLParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_bodyContext switch_body() {
			return GetRuleContext<Switch_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		public Union_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterUnion_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitUnion_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Union_typeContext union_type() {
		Union_typeContext _localctx = new Union_typeContext(Context, State);
		EnterRule(_localctx, 180, RULE_union_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 950;
			annapps();
			State = 951;
			Match(KW_UNION);
			State = 952;
			Match(ID);
			State = 953;
			Match(KW_SWITCH);
			State = 954;
			Match(LEFT_BRACKET);
			State = 955;
			switch_type_spec();
			State = 956;
			Match(RIGHT_BRACKET);
			State = 957;
			Match(LEFT_BRACE);
			State = 958;
			switch_body();
			State = 959;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Integer_typeContext integer_type() {
			return GetRuleContext<Integer_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_typeContext char_type() {
			return GetRuleContext<Char_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wide_char_typeContext wide_char_type() {
			return GetRuleContext<Wide_char_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Octet_typeContext octet_type() {
			return GetRuleContext<Octet_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_typeContext boolean_type() {
			return GetRuleContext<Boolean_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_typeContext enum_type() {
			return GetRuleContext<Enum_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		public Switch_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterSwitch_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitSwitch_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_type_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_type_specContext switch_type_spec() {
		Switch_type_specContext _localctx = new Switch_type_specContext(Context, State);
		EnterRule(_localctx, 182, RULE_switch_type_spec);
		try {
			State = 968;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_SHORT:
			case KW_LONG:
			case KW_UNSIGNED:
			case KW_INT8:
			case KW_UINT8:
			case KW_INT16:
			case KW_UINT16:
			case KW_INT32:
			case KW_UINT32:
			case KW_INT64:
			case KW_UINT64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 961;
				integer_type();
				}
				break;
			case KW_CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 962;
				char_type();
				}
				break;
			case KW_WCHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 963;
				wide_char_type();
				}
				break;
			case KW_OCTET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 964;
				octet_type();
				}
				break;
			case KW_BOOLEAN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 965;
				boolean_type();
				}
				break;
			case AT:
			case KW_ENUM:
				EnterOuterAlt(_localctx, 6);
				{
				State = 966;
				enum_type();
				}
				break;
			case DOUBLE_COLON:
			case ID:
				EnterOuterAlt(_localctx, 7);
				{
				State = 967;
				scoped_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Case_stmtContext[] case_stmt() {
			return GetRuleContexts<Case_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_stmtContext case_stmt(int i) {
			return GetRuleContext<Case_stmtContext>(i);
		}
		public Switch_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterSwitch_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitSwitch_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_bodyContext switch_body() {
		Switch_bodyContext _localctx = new Switch_bodyContext(Context, State);
		EnterRule(_localctx, 184, RULE_switch_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 970;
				case_stmt();
				}
				}
				State = 973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KW_DEFAULT || _la==KW_CASE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Element_specContext element_spec() {
			return GetRuleContext<Element_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(IDLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_labelContext[] case_label() {
			return GetRuleContexts<Case_labelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_labelContext case_label(int i) {
			return GetRuleContext<Case_labelContext>(i);
		}
		public Case_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterCase_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitCase_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_stmtContext case_stmt() {
		Case_stmtContext _localctx = new Case_stmtContext(Context, State);
		EnterRule(_localctx, 186, RULE_case_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 976;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 975;
				case_label();
				}
				}
				State = 978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KW_DEFAULT || _la==KW_CASE );
			State = 980;
			element_spec();
			State = 981;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CASE() { return GetToken(IDLParser.KW_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Const_expContext const_exp() {
			return GetRuleContext<Const_expContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(IDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEFAULT() { return GetToken(IDLParser.KW_DEFAULT, 0); }
		public Case_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterCase_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitCase_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_label(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_labelContext case_label() {
		Case_labelContext _localctx = new Case_labelContext(Context, State);
		EnterRule(_localctx, 188, RULE_case_label);
		try {
			State = 989;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 983;
				Match(KW_CASE);
				State = 984;
				const_exp();
				State = 985;
				Match(COLON);
				}
				break;
			case KW_DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 987;
				Match(KW_DEFAULT);
				State = 988;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterElement_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitElement_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_specContext element_spec() {
		Element_specContext _localctx = new Element_specContext(Context, State);
		EnterRule(_localctx, 190, RULE_element_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 991;
			annapps();
			State = 992;
			type_spec();
			State = 993;
			declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENUM() { return GetToken(IDLParser.KW_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext[] enumerator() {
			return GetRuleContexts<EnumeratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext enumerator(int i) {
			return GetRuleContext<EnumeratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public Enum_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterEnum_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitEnum_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_typeContext enum_type() {
		Enum_typeContext _localctx = new Enum_typeContext(Context, State);
		EnterRule(_localctx, 192, RULE_enum_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 995;
			annapps();
			State = 996;
			Match(KW_ENUM);
			State = 997;
			Match(ID);
			State = 998;
			Match(LEFT_BRACE);
			State = 999;
			enumerator();
			State = 1004;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1000;
				Match(COMMA);
				State = 1001;
				enumerator();
				}
				}
				State = 1006;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1007;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterEnumerator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitEnumerator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 194, RULE_enumerator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1009;
			annapps();
			State = 1010;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SEQUENCE() { return GetToken(IDLParser.KW_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANG_BRACKET() { return GetToken(IDLParser.LEFT_ANG_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_type_specContext simple_type_spec() {
			return GetRuleContext<Simple_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANG_BRACKET() { return GetToken(IDLParser.RIGHT_ANG_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(IDLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Positive_int_constContext positive_int_const() {
			return GetRuleContext<Positive_int_constContext>(0);
		}
		public Sequence_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterSequence_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitSequence_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_typeContext sequence_type() {
		Sequence_typeContext _localctx = new Sequence_typeContext(Context, State);
		EnterRule(_localctx, 196, RULE_sequence_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1012;
			Match(KW_SEQUENCE);
			State = 1013;
			Match(LEFT_ANG_BRACKET);
			State = 1014;
			simple_type_spec();
			State = 1017;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1015;
				Match(COMMA);
				State = 1016;
				positive_int_const();
				}
			}

			State = 1019;
			Match(RIGHT_ANG_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MAP() { return GetToken(IDLParser.KW_MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANG_BRACKET() { return GetToken(IDLParser.LEFT_ANG_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_type_specContext[] simple_type_spec() {
			return GetRuleContexts<Simple_type_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_type_specContext simple_type_spec(int i) {
			return GetRuleContext<Simple_type_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANG_BRACKET() { return GetToken(IDLParser.RIGHT_ANG_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Positive_int_constContext positive_int_const() {
			return GetRuleContext<Positive_int_constContext>(0);
		}
		public Map_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterMap_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitMap_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_typeContext map_type() {
		Map_typeContext _localctx = new Map_typeContext(Context, State);
		EnterRule(_localctx, 198, RULE_map_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1021;
			Match(KW_MAP);
			State = 1022;
			Match(LEFT_ANG_BRACKET);
			State = 1023;
			simple_type_spec();
			State = 1024;
			Match(COMMA);
			State = 1025;
			simple_type_spec();
			State = 1028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1026;
				Match(COMMA);
				State = 1027;
				positive_int_const();
				}
			}

			State = 1030;
			Match(RIGHT_ANG_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STRING() { return GetToken(IDLParser.KW_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANG_BRACKET() { return GetToken(IDLParser.LEFT_ANG_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Positive_int_constContext positive_int_const() {
			return GetRuleContext<Positive_int_constContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANG_BRACKET() { return GetToken(IDLParser.RIGHT_ANG_BRACKET, 0); }
		public String_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterString_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitString_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_typeContext string_type() {
		String_typeContext _localctx = new String_typeContext(Context, State);
		EnterRule(_localctx, 200, RULE_string_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032;
			Match(KW_STRING);
			State = 1037;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_ANG_BRACKET) {
				{
				State = 1033;
				Match(LEFT_ANG_BRACKET);
				State = 1034;
				positive_int_const();
				State = 1035;
				Match(RIGHT_ANG_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wide_string_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WSTRING() { return GetToken(IDLParser.KW_WSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANG_BRACKET() { return GetToken(IDLParser.LEFT_ANG_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Positive_int_constContext positive_int_const() {
			return GetRuleContext<Positive_int_constContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANG_BRACKET() { return GetToken(IDLParser.RIGHT_ANG_BRACKET, 0); }
		public Wide_string_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wide_string_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterWide_string_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitWide_string_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWide_string_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wide_string_typeContext wide_string_type() {
		Wide_string_typeContext _localctx = new Wide_string_typeContext(Context, State);
		EnterRule(_localctx, 202, RULE_wide_string_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1039;
			Match(KW_WSTRING);
			State = 1044;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_ANG_BRACKET) {
				{
				State = 1040;
				Match(LEFT_ANG_BRACKET);
				State = 1041;
				positive_int_const();
				State = 1042;
				Match(RIGHT_ANG_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_array_sizeContext[] fixed_array_size() {
			return GetRuleContexts<Fixed_array_sizeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_array_sizeContext fixed_array_size(int i) {
			return GetRuleContext<Fixed_array_sizeContext>(i);
		}
		public Array_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterArray_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitArray_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_declaratorContext array_declarator() {
		Array_declaratorContext _localctx = new Array_declaratorContext(Context, State);
		EnterRule(_localctx, 204, RULE_array_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046;
			Match(ID);
			State = 1048;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1047;
				fixed_array_size();
				}
				}
				State = 1050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LEFT_SQUARE_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_array_sizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE_BRACKET() { return GetToken(IDLParser.LEFT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Positive_int_constContext positive_int_const() {
			return GetRuleContext<Positive_int_constContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE_BRACKET() { return GetToken(IDLParser.RIGHT_SQUARE_BRACKET, 0); }
		public Fixed_array_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_array_size; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterFixed_array_size(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitFixed_array_size(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_array_size(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_array_sizeContext fixed_array_size() {
		Fixed_array_sizeContext _localctx = new Fixed_array_sizeContext(Context, State);
		EnterRule(_localctx, 206, RULE_fixed_array_size);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			Match(LEFT_SQUARE_BRACKET);
			State = 1053;
			positive_int_const();
			State = 1054;
			Match(RIGHT_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attr_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Readonly_attr_specContext readonly_attr_spec() {
			return GetRuleContext<Readonly_attr_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_specContext attr_spec() {
			return GetRuleContext<Attr_specContext>(0);
		}
		public Attr_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAttr_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAttr_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttr_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attr_declContext attr_decl() {
		Attr_declContext _localctx = new Attr_declContext(Context, State);
		EnterRule(_localctx, 208, RULE_attr_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056;
			annapps();
			State = 1059;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_READONLY:
				{
				State = 1057;
				readonly_attr_spec();
				}
				break;
			case KW_ATTRIBUTE:
				{
				State = 1058;
				attr_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Except_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXCEPTION() { return GetToken(IDLParser.KW_EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public Except_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_except_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterExcept_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitExcept_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExcept_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Except_declContext except_decl() {
		Except_declContext _localctx = new Except_declContext(Context, State);
		EnterRule(_localctx, 210, RULE_except_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061;
			annapps();
			State = 1062;
			Match(KW_EXCEPTION);
			State = 1063;
			Match(ID);
			State = 1064;
			Match(LEFT_BRACE);
			State = 1068;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2160953176541364224L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 422109523667073L) != 0)) {
				{
				{
				State = 1065;
				member();
				}
				}
				State = 1070;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1071;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_type_specContext op_type_spec() {
			return GetRuleContext<Op_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_declsContext parameter_decls() {
			return GetRuleContext<Parameter_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_attributeContext op_attribute() {
			return GetRuleContext<Op_attributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Raises_exprContext raises_expr() {
			return GetRuleContext<Raises_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Context_exprContext context_expr() {
			return GetRuleContext<Context_exprContext>(0);
		}
		public Op_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterOp_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitOp_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_declContext op_decl() {
		Op_declContext _localctx = new Op_declContext(Context, State);
		EnterRule(_localctx, 212, RULE_op_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1073;
			annapps();
			State = 1075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ONEWAY) {
				{
				State = 1074;
				op_attribute();
				}
			}

			State = 1077;
			op_type_spec();
			State = 1078;
			Match(ID);
			State = 1079;
			parameter_decls();
			State = 1081;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_RAISES) {
				{
				State = 1080;
				raises_expr();
				}
			}

			State = 1084;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_CONTEXT) {
				{
				State = 1083;
				context_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ONEWAY() { return GetToken(IDLParser.KW_ONEWAY, 0); }
		public Op_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterOp_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitOp_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_attributeContext op_attribute() {
		Op_attributeContext _localctx = new Op_attributeContext(Context, State);
		EnterRule(_localctx, 214, RULE_op_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086;
			Match(KW_ONEWAY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Param_type_specContext param_type_spec() {
			return GetRuleContext<Param_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VOID() { return GetToken(IDLParser.KW_VOID, 0); }
		public Op_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterOp_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitOp_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_type_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_type_specContext op_type_spec() {
		Op_type_specContext _localctx = new Op_type_specContext(Context, State);
		EnterRule(_localctx, 216, RULE_op_type_spec);
		try {
			State = 1090;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE_COLON:
			case KW_STRING:
			case KW_OCTET:
			case KW_WCHAR:
			case KW_SHORT:
			case KW_LONG:
			case KW_WSTRING:
			case KW_VALUEBASE:
			case KW_OBJECT:
			case KW_UNSIGNED:
			case KW_ANY:
			case KW_CHAR:
			case KW_FLOAT:
			case KW_BOOLEAN:
			case KW_DOUBLE:
			case KW_INT8:
			case KW_UINT8:
			case KW_INT16:
			case KW_UINT16:
			case KW_INT32:
			case KW_UINT32:
			case KW_INT64:
			case KW_UINT64:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1088;
				param_type_spec();
				}
				break;
			case KW_VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1089;
				Match(KW_VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(IDLParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(IDLParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_declContext[] param_decl() {
			return GetRuleContexts<Param_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_declContext param_decl(int i) {
			return GetRuleContext<Param_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public Parameter_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterParameter_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitParameter_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_decls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declsContext parameter_decls() {
		Parameter_declsContext _localctx = new Parameter_declsContext(Context, State);
		EnterRule(_localctx, 218, RULE_parameter_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1092;
			Match(LEFT_BRACKET);
			State = 1101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & 9007199263129605L) != 0)) {
				{
				State = 1093;
				param_decl();
				State = 1098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1094;
					Match(COMMA);
					State = 1095;
					param_decl();
					}
					}
					State = 1100;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1103;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_attributeContext param_attribute() {
			return GetRuleContext<Param_attributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_type_specContext param_type_spec() {
			return GetRuleContext<Param_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_declaratorContext simple_declarator() {
			return GetRuleContext<Simple_declaratorContext>(0);
		}
		public Param_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterParam_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitParam_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_declContext param_decl() {
		Param_declContext _localctx = new Param_declContext(Context, State);
		EnterRule(_localctx, 220, RULE_param_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			annapps();
			State = 1106;
			param_attribute();
			State = 1107;
			param_type_spec();
			State = 1108;
			simple_declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(IDLParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OUT() { return GetToken(IDLParser.KW_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INOUT() { return GetToken(IDLParser.KW_INOUT, 0); }
		public Param_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterParam_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitParam_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_attributeContext param_attribute() {
		Param_attributeContext _localctx = new Param_attributeContext(Context, State);
		EnterRule(_localctx, 222, RULE_param_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1110;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & 2251799815782401L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raises_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RAISES() { return GetToken(IDLParser.KW_RAISES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(IDLParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext[] scoped_name() {
			return GetRuleContexts<Scoped_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name(int i) {
			return GetRuleContext<Scoped_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(IDLParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public Raises_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raises_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterRaises_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitRaises_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaises_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raises_exprContext raises_expr() {
		Raises_exprContext _localctx = new Raises_exprContext(Context, State);
		EnterRule(_localctx, 224, RULE_raises_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112;
			Match(KW_RAISES);
			State = 1113;
			Match(LEFT_BRACKET);
			State = 1114;
			scoped_name();
			State = 1119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1115;
				Match(COMMA);
				State = 1116;
				scoped_name();
				}
				}
				State = 1121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1122;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Context_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONTEXT() { return GetToken(IDLParser.KW_CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(IDLParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(IDLParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(IDLParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(IDLParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public Context_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_context_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterContext_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitContext_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContext_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Context_exprContext context_expr() {
		Context_exprContext _localctx = new Context_exprContext(Context, State);
		EnterRule(_localctx, 226, RULE_context_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1124;
			Match(KW_CONTEXT);
			State = 1125;
			Match(LEFT_BRACKET);
			State = 1126;
			Match(STRING_LITERAL);
			State = 1131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1127;
				Match(COMMA);
				State = 1128;
				Match(STRING_LITERAL);
				}
				}
				State = 1133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1134;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_type_specContext base_type_spec() {
			return GetRuleContext<Base_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_typeContext string_type() {
			return GetRuleContext<String_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wide_string_typeContext wide_string_type() {
			return GetRuleContext<Wide_string_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		public Param_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterParam_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitParam_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_type_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_type_specContext param_type_spec() {
		Param_type_specContext _localctx = new Param_type_specContext(Context, State);
		EnterRule(_localctx, 228, RULE_param_type_spec);
		try {
			State = 1140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_OCTET:
			case KW_WCHAR:
			case KW_SHORT:
			case KW_LONG:
			case KW_VALUEBASE:
			case KW_OBJECT:
			case KW_UNSIGNED:
			case KW_ANY:
			case KW_CHAR:
			case KW_FLOAT:
			case KW_BOOLEAN:
			case KW_DOUBLE:
			case KW_INT8:
			case KW_UINT8:
			case KW_INT16:
			case KW_UINT16:
			case KW_INT32:
			case KW_UINT32:
			case KW_INT64:
			case KW_UINT64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1136;
				base_type_spec();
				}
				break;
			case KW_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1137;
				string_type();
				}
				break;
			case KW_WSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1138;
				wide_string_type();
				}
				break;
			case DOUBLE_COLON:
			case ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1139;
				scoped_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pt_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FIXED() { return GetToken(IDLParser.KW_FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANG_BRACKET() { return GetToken(IDLParser.LEFT_ANG_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Positive_int_constContext[] positive_int_const() {
			return GetRuleContexts<Positive_int_constContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Positive_int_constContext positive_int_const(int i) {
			return GetRuleContext<Positive_int_constContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(IDLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANG_BRACKET() { return GetToken(IDLParser.RIGHT_ANG_BRACKET, 0); }
		public Fixed_pt_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pt_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterFixed_pt_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitFixed_pt_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pt_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pt_typeContext fixed_pt_type() {
		Fixed_pt_typeContext _localctx = new Fixed_pt_typeContext(Context, State);
		EnterRule(_localctx, 230, RULE_fixed_pt_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142;
			Match(KW_FIXED);
			State = 1143;
			Match(LEFT_ANG_BRACKET);
			State = 1144;
			positive_int_const();
			State = 1145;
			Match(COMMA);
			State = 1146;
			positive_int_const();
			State = 1147;
			Match(RIGHT_ANG_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pt_const_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FIXED() { return GetToken(IDLParser.KW_FIXED, 0); }
		public Fixed_pt_const_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pt_const_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterFixed_pt_const_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitFixed_pt_const_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pt_const_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pt_const_typeContext fixed_pt_const_type() {
		Fixed_pt_const_typeContext _localctx = new Fixed_pt_const_typeContext(Context, State);
		EnterRule(_localctx, 232, RULE_fixed_pt_const_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1149;
			Match(KW_FIXED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_base_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VALUEBASE() { return GetToken(IDLParser.KW_VALUEBASE, 0); }
		public Value_base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_base_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterValue_base_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitValue_base_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_base_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_base_typeContext value_base_type() {
		Value_base_typeContext _localctx = new Value_base_typeContext(Context, State);
		EnterRule(_localctx, 234, RULE_value_base_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1151;
			Match(KW_VALUEBASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constr_forward_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STRUCT() { return GetToken(IDLParser.KW_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNION() { return GetToken(IDLParser.KW_UNION, 0); }
		public Constr_forward_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constr_forward_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterConstr_forward_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitConstr_forward_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstr_forward_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constr_forward_declContext constr_forward_decl() {
		Constr_forward_declContext _localctx = new Constr_forward_declContext(Context, State);
		EnterRule(_localctx, 236, RULE_constr_forward_decl);
		try {
			State = 1157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_STRUCT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1153;
				Match(KW_STRUCT);
				State = 1154;
				Match(ID);
				}
				break;
			case KW_UNION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1155;
				Match(KW_UNION);
				State = 1156;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPORT() { return GetToken(IDLParser.KW_IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Imported_scopeContext imported_scope() {
			return GetRuleContext<Imported_scopeContext>(0);
		}
		public Import_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterImport_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitImport_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_declContext import_decl() {
		Import_declContext _localctx = new Import_declContext(Context, State);
		EnterRule(_localctx, 238, RULE_import_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1159;
			Match(KW_IMPORT);
			State = 1160;
			imported_scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Imported_scopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(IDLParser.STRING_LITERAL, 0); }
		public Imported_scopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imported_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterImported_scope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitImported_scope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImported_scope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Imported_scopeContext imported_scope() {
		Imported_scopeContext _localctx = new Imported_scopeContext(Context, State);
		EnterRule(_localctx, 240, RULE_imported_scope);
		try {
			State = 1164;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE_COLON:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1162;
				scoped_name();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1163;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_id_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TYPEID() { return GetToken(IDLParser.KW_TYPEID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(IDLParser.STRING_LITERAL, 0); }
		public Type_id_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_id_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterType_id_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitType_id_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_id_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_id_declContext type_id_decl() {
		Type_id_declContext _localctx = new Type_id_declContext(Context, State);
		EnterRule(_localctx, 242, RULE_type_id_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166;
			Match(KW_TYPEID);
			State = 1167;
			scoped_name();
			State = 1168;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_prefix_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TYPEPREFIX() { return GetToken(IDLParser.KW_TYPEPREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(IDLParser.STRING_LITERAL, 0); }
		public Type_prefix_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_prefix_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterType_prefix_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitType_prefix_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_prefix_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_prefix_declContext type_prefix_decl() {
		Type_prefix_declContext _localctx = new Type_prefix_declContext(Context, State);
		EnterRule(_localctx, 244, RULE_type_prefix_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1170;
			Match(KW_TYPEPREFIX);
			State = 1171;
			scoped_name();
			State = 1172;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Readonly_attr_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_READONLY() { return GetToken(IDLParser.KW_READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ATTRIBUTE() { return GetToken(IDLParser.KW_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_type_specContext param_type_spec() {
			return GetRuleContext<Param_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Readonly_attr_declaratorContext readonly_attr_declarator() {
			return GetRuleContext<Readonly_attr_declaratorContext>(0);
		}
		public Readonly_attr_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readonly_attr_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterReadonly_attr_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitReadonly_attr_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadonly_attr_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Readonly_attr_specContext readonly_attr_spec() {
		Readonly_attr_specContext _localctx = new Readonly_attr_specContext(Context, State);
		EnterRule(_localctx, 246, RULE_readonly_attr_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1174;
			Match(KW_READONLY);
			State = 1175;
			Match(KW_ATTRIBUTE);
			State = 1176;
			param_type_spec();
			State = 1177;
			readonly_attr_declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Readonly_attr_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_declaratorContext[] simple_declarator() {
			return GetRuleContexts<Simple_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_declaratorContext simple_declarator(int i) {
			return GetRuleContext<Simple_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Raises_exprContext raises_expr() {
			return GetRuleContext<Raises_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public Readonly_attr_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readonly_attr_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterReadonly_attr_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitReadonly_attr_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadonly_attr_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Readonly_attr_declaratorContext readonly_attr_declarator() {
		Readonly_attr_declaratorContext _localctx = new Readonly_attr_declaratorContext(Context, State);
		EnterRule(_localctx, 248, RULE_readonly_attr_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1179;
			simple_declarator();
			State = 1188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_RAISES:
				{
				State = 1180;
				raises_expr();
				}
				break;
			case SEMICOLON:
			case COMMA:
				{
				State = 1185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1181;
					Match(COMMA);
					State = 1182;
					simple_declarator();
					}
					}
					State = 1187;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attr_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ATTRIBUTE() { return GetToken(IDLParser.KW_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_type_specContext param_type_spec() {
			return GetRuleContext<Param_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_declaratorContext attr_declarator() {
			return GetRuleContext<Attr_declaratorContext>(0);
		}
		public Attr_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAttr_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAttr_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttr_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attr_specContext attr_spec() {
		Attr_specContext _localctx = new Attr_specContext(Context, State);
		EnterRule(_localctx, 250, RULE_attr_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1190;
			Match(KW_ATTRIBUTE);
			State = 1191;
			param_type_spec();
			State = 1192;
			attr_declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attr_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_declaratorContext[] simple_declarator() {
			return GetRuleContexts<Simple_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_declaratorContext simple_declarator(int i) {
			return GetRuleContext<Simple_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_raises_exprContext attr_raises_expr() {
			return GetRuleContext<Attr_raises_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public Attr_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAttr_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAttr_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttr_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attr_declaratorContext attr_declarator() {
		Attr_declaratorContext _localctx = new Attr_declaratorContext(Context, State);
		EnterRule(_localctx, 252, RULE_attr_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1194;
			simple_declarator();
			State = 1203;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_SETRAISES:
			case KW_GETRAISES:
				{
				State = 1195;
				attr_raises_expr();
				}
				break;
			case SEMICOLON:
			case COMMA:
				{
				State = 1200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1196;
					Match(COMMA);
					State = 1197;
					simple_declarator();
					}
					}
					State = 1202;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attr_raises_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Get_excep_exprContext get_excep_expr() {
			return GetRuleContext<Get_excep_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_excep_exprContext set_excep_expr() {
			return GetRuleContext<Set_excep_exprContext>(0);
		}
		public Attr_raises_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr_raises_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAttr_raises_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAttr_raises_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttr_raises_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attr_raises_exprContext attr_raises_expr() {
		Attr_raises_exprContext _localctx = new Attr_raises_exprContext(Context, State);
		EnterRule(_localctx, 254, RULE_attr_raises_expr);
		int _la;
		try {
			State = 1210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_GETRAISES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1205;
				get_excep_expr();
				State = 1207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_SETRAISES) {
					{
					State = 1206;
					set_excep_expr();
					}
				}

				}
				break;
			case KW_SETRAISES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1209;
				set_excep_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_excep_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GETRAISES() { return GetToken(IDLParser.KW_GETRAISES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Exception_listContext exception_list() {
			return GetRuleContext<Exception_listContext>(0);
		}
		public Get_excep_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_excep_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterGet_excep_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitGet_excep_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_excep_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_excep_exprContext get_excep_expr() {
		Get_excep_exprContext _localctx = new Get_excep_exprContext(Context, State);
		EnterRule(_localctx, 256, RULE_get_excep_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1212;
			Match(KW_GETRAISES);
			State = 1213;
			exception_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_excep_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SETRAISES() { return GetToken(IDLParser.KW_SETRAISES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Exception_listContext exception_list() {
			return GetRuleContext<Exception_listContext>(0);
		}
		public Set_excep_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_excep_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterSet_excep_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitSet_excep_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_excep_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_excep_exprContext set_excep_expr() {
		Set_excep_exprContext _localctx = new Set_excep_exprContext(Context, State);
		EnterRule(_localctx, 258, RULE_set_excep_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1215;
			Match(KW_SETRAISES);
			State = 1216;
			exception_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(IDLParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext[] scoped_name() {
			return GetRuleContexts<Scoped_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name(int i) {
			return GetRuleContext<Scoped_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(IDLParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public Exception_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterException_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitException_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_listContext exception_list() {
		Exception_listContext _localctx = new Exception_listContext(Context, State);
		EnterRule(_localctx, 260, RULE_exception_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218;
			Match(LEFT_BRACKET);
			State = 1219;
			scoped_name();
			State = 1224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1220;
				Match(COMMA);
				State = 1221;
				scoped_name();
				}
				}
				State = 1226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1227;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Component_declContext component_decl() {
			return GetRuleContext<Component_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_forward_declContext component_forward_decl() {
			return GetRuleContext<Component_forward_declContext>(0);
		}
		public ComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentContext component() {
		ComponentContext _localctx = new ComponentContext(Context, State);
		EnterRule(_localctx, 262, RULE_component);
		try {
			State = 1231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1229;
				component_decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1230;
				component_forward_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_forward_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMPONENT() { return GetToken(IDLParser.KW_COMPONENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		public Component_forward_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_forward_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterComponent_forward_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitComponent_forward_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent_forward_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Component_forward_declContext component_forward_decl() {
		Component_forward_declContext _localctx = new Component_forward_declContext(Context, State);
		EnterRule(_localctx, 264, RULE_component_forward_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1233;
			annapps();
			State = 1234;
			Match(KW_COMPONENT);
			State = 1235;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_headerContext component_header() {
			return GetRuleContext<Component_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Component_bodyContext component_body() {
			return GetRuleContext<Component_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		public Component_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterComponent_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitComponent_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Component_declContext component_decl() {
		Component_declContext _localctx = new Component_declContext(Context, State);
		EnterRule(_localctx, 266, RULE_component_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237;
			annapps();
			State = 1238;
			component_header();
			State = 1239;
			Match(LEFT_BRACE);
			State = 1240;
			component_body();
			State = 1241;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMPONENT() { return GetToken(IDLParser.KW_COMPONENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Component_inheritance_specContext component_inheritance_spec() {
			return GetRuleContext<Component_inheritance_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Supported_interface_specContext supported_interface_spec() {
			return GetRuleContext<Supported_interface_specContext>(0);
		}
		public Component_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterComponent_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitComponent_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Component_headerContext component_header() {
		Component_headerContext _localctx = new Component_headerContext(Context, State);
		EnterRule(_localctx, 268, RULE_component_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243;
			Match(KW_COMPONENT);
			State = 1244;
			Match(ID);
			State = 1246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1245;
				component_inheritance_spec();
				}
			}

			State = 1249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_SUPPORTS) {
				{
				State = 1248;
				supported_interface_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Supported_interface_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUPPORTS() { return GetToken(IDLParser.KW_SUPPORTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext[] scoped_name() {
			return GetRuleContexts<Scoped_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name(int i) {
			return GetRuleContext<Scoped_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public Supported_interface_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supported_interface_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterSupported_interface_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitSupported_interface_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupported_interface_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Supported_interface_specContext supported_interface_spec() {
		Supported_interface_specContext _localctx = new Supported_interface_specContext(Context, State);
		EnterRule(_localctx, 270, RULE_supported_interface_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251;
			Match(KW_SUPPORTS);
			State = 1252;
			scoped_name();
			State = 1257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1253;
				Match(COMMA);
				State = 1254;
				scoped_name();
				}
				}
				State = 1259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_inheritance_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(IDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		public Component_inheritance_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_inheritance_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterComponent_inheritance_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitComponent_inheritance_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent_inheritance_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Component_inheritance_specContext component_inheritance_spec() {
		Component_inheritance_specContext _localctx = new Component_inheritance_specContext(Context, State);
		EnterRule(_localctx, 272, RULE_component_inheritance_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1260;
			Match(COLON);
			State = 1261;
			scoped_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Component_exportContext[] component_export() {
			return GetRuleContexts<Component_exportContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_exportContext component_export(int i) {
			return GetRuleContext<Component_exportContext>(i);
		}
		public Component_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterComponent_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitComponent_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Component_bodyContext component_body() {
		Component_bodyContext _localctx = new Component_bodyContext(Context, State);
		EnterRule(_localctx, 274, RULE_component_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & 630503947831935305L) != 0)) {
				{
				{
				State = 1263;
				component_export();
				}
				}
				State = 1268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_exportContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Provides_declContext provides_decl() {
			return GetRuleContext<Provides_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(IDLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Uses_declContext uses_decl() {
			return GetRuleContext<Uses_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Emits_declContext emits_decl() {
			return GetRuleContext<Emits_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Publishes_declContext publishes_decl() {
			return GetRuleContext<Publishes_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Consumes_declContext consumes_decl() {
			return GetRuleContext<Consumes_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_declContext attr_decl() {
			return GetRuleContext<Attr_declContext>(0);
		}
		public Component_exportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_export; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterComponent_export(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitComponent_export(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent_export(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Component_exportContext component_export() {
		Component_exportContext _localctx = new Component_exportContext(Context, State);
		EnterRule(_localctx, 276, RULE_component_export);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1269;
			annapps();
			State = 1288;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_PROVIDES:
				{
				State = 1270;
				provides_decl();
				State = 1271;
				Match(SEMICOLON);
				}
				break;
			case KW_USES:
				{
				State = 1273;
				uses_decl();
				State = 1274;
				Match(SEMICOLON);
				}
				break;
			case KW_EMITS:
				{
				State = 1276;
				emits_decl();
				State = 1277;
				Match(SEMICOLON);
				}
				break;
			case KW_PUBLISHES:
				{
				State = 1279;
				publishes_decl();
				State = 1280;
				Match(SEMICOLON);
				}
				break;
			case KW_CONSUMES:
				{
				State = 1282;
				consumes_decl();
				State = 1283;
				Match(SEMICOLON);
				}
				break;
			case AT:
			case KW_READONLY:
			case KW_ATTRIBUTE:
				{
				State = 1285;
				attr_decl();
				State = 1286;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Provides_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PROVIDES() { return GetToken(IDLParser.KW_PROVIDES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_typeContext interface_type() {
			return GetRuleContext<Interface_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		public Provides_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_provides_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterProvides_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitProvides_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProvides_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Provides_declContext provides_decl() {
		Provides_declContext _localctx = new Provides_declContext(Context, State);
		EnterRule(_localctx, 278, RULE_provides_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1290;
			Match(KW_PROVIDES);
			State = 1291;
			interface_type();
			State = 1292;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OBJECT() { return GetToken(IDLParser.KW_OBJECT, 0); }
		public Interface_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterInterface_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitInterface_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_typeContext interface_type() {
		Interface_typeContext _localctx = new Interface_typeContext(Context, State);
		EnterRule(_localctx, 280, RULE_interface_type);
		try {
			State = 1296;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE_COLON:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1294;
				scoped_name();
				}
				break;
			case KW_OBJECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1295;
				Match(KW_OBJECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Uses_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USES() { return GetToken(IDLParser.KW_USES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_typeContext interface_type() {
			return GetRuleContext<Interface_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MULTIPLE() { return GetToken(IDLParser.KW_MULTIPLE, 0); }
		public Uses_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uses_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterUses_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitUses_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUses_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Uses_declContext uses_decl() {
		Uses_declContext _localctx = new Uses_declContext(Context, State);
		EnterRule(_localctx, 282, RULE_uses_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1298;
			Match(KW_USES);
			State = 1300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_MULTIPLE) {
				{
				State = 1299;
				Match(KW_MULTIPLE);
				}
			}

			State = 1302;
			interface_type();
			State = 1303;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Emits_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EMITS() { return GetToken(IDLParser.KW_EMITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		public Emits_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emits_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterEmits_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitEmits_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmits_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Emits_declContext emits_decl() {
		Emits_declContext _localctx = new Emits_declContext(Context, State);
		EnterRule(_localctx, 284, RULE_emits_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1305;
			Match(KW_EMITS);
			State = 1306;
			scoped_name();
			State = 1307;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Publishes_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PUBLISHES() { return GetToken(IDLParser.KW_PUBLISHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		public Publishes_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publishes_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPublishes_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPublishes_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublishes_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Publishes_declContext publishes_decl() {
		Publishes_declContext _localctx = new Publishes_declContext(Context, State);
		EnterRule(_localctx, 286, RULE_publishes_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309;
			Match(KW_PUBLISHES);
			State = 1310;
			scoped_name();
			State = 1311;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Consumes_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSUMES() { return GetToken(IDLParser.KW_CONSUMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		public Consumes_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consumes_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterConsumes_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitConsumes_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConsumes_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Consumes_declContext consumes_decl() {
		Consumes_declContext _localctx = new Consumes_declContext(Context, State);
		EnterRule(_localctx, 288, RULE_consumes_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1313;
			Match(KW_CONSUMES);
			State = 1314;
			scoped_name();
			State = 1315;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Home_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Home_headerContext home_header() {
			return GetRuleContext<Home_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Home_bodyContext home_body() {
			return GetRuleContext<Home_bodyContext>(0);
		}
		public Home_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_home_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterHome_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitHome_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHome_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Home_declContext home_decl() {
		Home_declContext _localctx = new Home_declContext(Context, State);
		EnterRule(_localctx, 290, RULE_home_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1317;
			home_header();
			State = 1318;
			home_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Home_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_HOME() { return GetToken(IDLParser.KW_HOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MANAGES() { return GetToken(IDLParser.KW_MANAGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Home_inheritance_specContext home_inheritance_spec() {
			return GetRuleContext<Home_inheritance_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Supported_interface_specContext supported_interface_spec() {
			return GetRuleContext<Supported_interface_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primary_key_specContext primary_key_spec() {
			return GetRuleContext<Primary_key_specContext>(0);
		}
		public Home_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_home_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterHome_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitHome_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHome_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Home_headerContext home_header() {
		Home_headerContext _localctx = new Home_headerContext(Context, State);
		EnterRule(_localctx, 292, RULE_home_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320;
			Match(KW_HOME);
			State = 1321;
			Match(ID);
			State = 1323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1322;
				home_inheritance_spec();
				}
			}

			State = 1326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_SUPPORTS) {
				{
				State = 1325;
				supported_interface_spec();
				}
			}

			State = 1328;
			Match(KW_MANAGES);
			State = 1329;
			scoped_name();
			State = 1331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PRIMARYKEY) {
				{
				State = 1330;
				primary_key_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Home_inheritance_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(IDLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		public Home_inheritance_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_home_inheritance_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterHome_inheritance_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitHome_inheritance_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHome_inheritance_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Home_inheritance_specContext home_inheritance_spec() {
		Home_inheritance_specContext _localctx = new Home_inheritance_specContext(Context, State);
		EnterRule(_localctx, 294, RULE_home_inheritance_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1333;
			Match(COLON);
			State = 1334;
			scoped_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_key_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PRIMARYKEY() { return GetToken(IDLParser.KW_PRIMARYKEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		public Primary_key_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_key_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPrimary_key_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPrimary_key_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_key_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_key_specContext primary_key_spec() {
		Primary_key_specContext _localctx = new Primary_key_specContext(Context, State);
		EnterRule(_localctx, 296, RULE_primary_key_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1336;
			Match(KW_PRIMARYKEY);
			State = 1337;
			scoped_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Home_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Home_exportContext[] home_export() {
			return GetRuleContexts<Home_exportContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Home_exportContext home_export(int i) {
			return GetRuleContext<Home_exportContext>(i);
		}
		public Home_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_home_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterHome_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitHome_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHome_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Home_bodyContext home_body() {
		Home_bodyContext _localctx = new Home_bodyContext(Context, State);
		EnterRule(_localctx, 298, RULE_home_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1339;
			Match(LEFT_BRACE);
			State = 1343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2135193818125828096L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 422077043026137L) != 0)) {
				{
				{
				State = 1340;
				home_export();
				}
				}
				State = 1345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1346;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Home_exportContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_exportContext interface_export() {
			return GetRuleContext<Interface_exportContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(IDLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Factory_declContext factory_decl() {
			return GetRuleContext<Factory_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Finder_declContext finder_decl() {
			return GetRuleContext<Finder_declContext>(0);
		}
		public Home_exportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_home_export; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterHome_export(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitHome_export(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHome_export(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Home_exportContext home_export() {
		Home_exportContext _localctx = new Home_exportContext(Context, State);
		EnterRule(_localctx, 300, RULE_home_export);
		try {
			State = 1356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1348;
				interface_export();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1349;
				annapps();
				State = 1352;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_FACTORY:
					{
					State = 1350;
					factory_decl();
					}
					break;
				case KW_FINDER:
					{
					State = 1351;
					finder_decl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1354;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factory_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FACTORY() { return GetToken(IDLParser.KW_FACTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(IDLParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(IDLParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Init_param_declsContext init_param_decls() {
			return GetRuleContext<Init_param_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Raises_exprContext raises_expr() {
			return GetRuleContext<Raises_exprContext>(0);
		}
		public Factory_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factory_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterFactory_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitFactory_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactory_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factory_declContext factory_decl() {
		Factory_declContext _localctx = new Factory_declContext(Context, State);
		EnterRule(_localctx, 302, RULE_factory_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1358;
			Match(KW_FACTORY);
			State = 1359;
			Match(ID);
			State = 1360;
			Match(LEFT_BRACKET);
			State = 1362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==KW_IN) {
				{
				State = 1361;
				init_param_decls();
				}
			}

			State = 1364;
			Match(RIGHT_BRACKET);
			State = 1366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_RAISES) {
				{
				State = 1365;
				raises_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finder_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FINDER() { return GetToken(IDLParser.KW_FINDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(IDLParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(IDLParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Init_param_declsContext init_param_decls() {
			return GetRuleContext<Init_param_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Raises_exprContext raises_expr() {
			return GetRuleContext<Raises_exprContext>(0);
		}
		public Finder_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finder_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterFinder_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitFinder_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinder_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finder_declContext finder_decl() {
		Finder_declContext _localctx = new Finder_declContext(Context, State);
		EnterRule(_localctx, 304, RULE_finder_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1368;
			Match(KW_FINDER);
			State = 1369;
			Match(ID);
			State = 1370;
			Match(LEFT_BRACKET);
			State = 1372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==KW_IN) {
				{
				State = 1371;
				init_param_decls();
				}
			}

			State = 1374;
			Match(RIGHT_BRACKET);
			State = 1376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_RAISES) {
				{
				State = 1375;
				raises_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnappsContext annapps() {
			return GetRuleContext<AnnappsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_declContext event_decl() {
			return GetRuleContext<Event_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_abs_declContext event_abs_decl() {
			return GetRuleContext<Event_abs_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_forward_declContext event_forward_decl() {
			return GetRuleContext<Event_forward_declContext>(0);
		}
		public EventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventContext @event() {
		EventContext _localctx = new EventContext(Context, State);
		EnterRule(_localctx, 306, RULE_event);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1378;
			annapps();
			State = 1382;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 1379;
				event_decl();
				}
				break;
			case 2:
				{
				State = 1380;
				event_abs_decl();
				}
				break;
			case 3:
				{
				State = 1381;
				event_forward_decl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_forward_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EVENTTYPE() { return GetToken(IDLParser.KW_EVENTTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABSTRACT() { return GetToken(IDLParser.KW_ABSTRACT, 0); }
		public Event_forward_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_forward_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterEvent_forward_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitEvent_forward_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_forward_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_forward_declContext event_forward_decl() {
		Event_forward_declContext _localctx = new Event_forward_declContext(Context, State);
		EnterRule(_localctx, 308, RULE_event_forward_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ABSTRACT) {
				{
				State = 1384;
				Match(KW_ABSTRACT);
				}
			}

			State = 1387;
			Match(KW_EVENTTYPE);
			State = 1388;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_abs_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABSTRACT() { return GetToken(IDLParser.KW_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EVENTTYPE() { return GetToken(IDLParser.KW_EVENTTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_inheritance_specContext value_inheritance_spec() {
			return GetRuleContext<Value_inheritance_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_exportContext[] interface_export() {
			return GetRuleContexts<Interface_exportContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_exportContext interface_export(int i) {
			return GetRuleContext<Interface_exportContext>(i);
		}
		public Event_abs_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_abs_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterEvent_abs_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitEvent_abs_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_abs_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_abs_declContext event_abs_decl() {
		Event_abs_declContext _localctx = new Event_abs_declContext(Context, State);
		EnterRule(_localctx, 310, RULE_event_abs_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1390;
			Match(KW_ABSTRACT);
			State = 1391;
			Match(KW_EVENTTYPE);
			State = 1392;
			Match(ID);
			State = 1393;
			value_inheritance_spec();
			State = 1394;
			Match(LEFT_BRACE);
			State = 1398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2139697417753198592L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 422077043026129L) != 0)) {
				{
				{
				State = 1395;
				interface_export();
				}
				}
				State = 1400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1401;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Event_headerContext event_header() {
			return GetRuleContext<Event_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(IDLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(IDLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_elementContext[] value_element() {
			return GetRuleContexts<Value_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_elementContext value_element(int i) {
			return GetRuleContext<Value_elementContext>(i);
		}
		public Event_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterEvent_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitEvent_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_declContext event_decl() {
		Event_declContext _localctx = new Event_declContext(Context, State);
		EnterRule(_localctx, 312, RULE_event_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1403;
			event_header();
			State = 1404;
			Match(LEFT_BRACE);
			State = 1408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -950747116127387648L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 422077043026137L) != 0)) {
				{
				{
				State = 1405;
				value_element();
				}
				}
				State = 1410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1411;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EVENTTYPE() { return GetToken(IDLParser.KW_EVENTTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_inheritance_specContext value_inheritance_spec() {
			return GetRuleContext<Value_inheritance_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CUSTOM() { return GetToken(IDLParser.KW_CUSTOM, 0); }
		public Event_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterEvent_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitEvent_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_headerContext event_header() {
		Event_headerContext _localctx = new Event_headerContext(Context, State);
		EnterRule(_localctx, 314, RULE_event_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_CUSTOM) {
				{
				State = 1413;
				Match(KW_CUSTOM);
				}
			}

			State = 1416;
			Match(KW_EVENTTYPE);
			State = 1417;
			Match(ID);
			State = 1418;
			value_inheritance_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnappsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_applContext[] annotation_appl() {
			return GetRuleContexts<Annotation_applContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_applContext annotation_appl(int i) {
			return GetRuleContext<Annotation_applContext>(i);
		}
		public AnnappsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annapps; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAnnapps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAnnapps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnapps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnappsContext annapps() {
		AnnappsContext _localctx = new AnnappsContext(Context, State);
		EnterRule(_localctx, 316, RULE_annapps);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1423;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1420;
					annotation_appl();
					}
					} 
				}
				State = 1425;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_applContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(IDLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(IDLParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_appl_paramsContext annotation_appl_params() {
			return GetRuleContext<Annotation_appl_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(IDLParser.RIGHT_BRACKET, 0); }
		public Annotation_applContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_appl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAnnotation_appl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAnnotation_appl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_appl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_applContext annotation_appl() {
		Annotation_applContext _localctx = new Annotation_applContext(Context, State);
		EnterRule(_localctx, 318, RULE_annotation_appl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1426;
			Match(AT);
			State = 1427;
			scoped_name();
			State = 1432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_BRACKET) {
				{
				State = 1428;
				Match(LEFT_BRACKET);
				State = 1429;
				annotation_appl_params();
				State = 1430;
				Match(RIGHT_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_appl_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Const_expContext const_exp() {
			return GetRuleContext<Const_expContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_appl_paramContext[] annotation_appl_param() {
			return GetRuleContexts<Annotation_appl_paramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_appl_paramContext annotation_appl_param(int i) {
			return GetRuleContext<Annotation_appl_paramContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(IDLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(IDLParser.COMMA, i);
		}
		public Annotation_appl_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_appl_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAnnotation_appl_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAnnotation_appl_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_appl_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_appl_paramsContext annotation_appl_params() {
		Annotation_appl_paramsContext _localctx = new Annotation_appl_paramsContext(Context, State);
		EnterRule(_localctx, 320, RULE_annotation_appl_params);
		int _la;
		try {
			State = 1443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1434;
				const_exp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1435;
				annotation_appl_param();
				State = 1440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1436;
					Match(COMMA);
					State = 1437;
					annotation_appl_param();
					}
					}
					State = 1442;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_appl_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(IDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(IDLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Const_expContext const_exp() {
			return GetRuleContext<Const_expContext>(0);
		}
		public Annotation_appl_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_appl_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterAnnotation_appl_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitAnnotation_appl_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_appl_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_appl_paramContext annotation_appl_param() {
		Annotation_appl_paramContext _localctx = new Annotation_appl_paramContext(Context, State);
		EnterRule(_localctx, 322, RULE_annotation_appl_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1445;
			Match(ID);
			State = 1446;
			Match(EQUAL);
			State = 1447;
			const_exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
	 
		public PragmaContext() { }
		public virtual void CopyFrom(PragmaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pragma_prefixContext : PragmaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA_PREFIX() { return GetToken(IDLParser.PRAGMA_PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(IDLParser.STRING_LITERAL, 0); }
		public Pragma_prefixContext(PragmaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPragma_prefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPragma_prefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_prefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pragma_versionContext : PragmaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA_VERSION() { return GetToken(IDLParser.PRAGMA_VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPED_NAME() { return GetToken(IDLParser.SCOPED_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_NUM() { return GetToken(IDLParser.VERSION_NUM, 0); }
		public Pragma_versionContext(PragmaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPragma_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPragma_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_version(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pragma_idContext : PragmaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA_ID() { return GetToken(IDLParser.PRAGMA_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(IDLParser.STRING_LITERAL, 0); }
		public Pragma_idContext(PragmaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPragma_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPragma_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(Context, State);
		EnterRule(_localctx, 324, RULE_pragma);
		try {
			State = 1458;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRAGMA_PREFIX:
				_localctx = new Pragma_prefixContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1449;
				Match(PRAGMA_PREFIX);
				State = 1450;
				Match(STRING_LITERAL);
				}
				break;
			case PRAGMA_ID:
				_localctx = new Pragma_idContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1451;
				Match(PRAGMA_ID);
				State = 1452;
				scoped_name();
				State = 1453;
				Match(STRING_LITERAL);
				}
				break;
			case PRAGMA_VERSION:
				_localctx = new Pragma_versionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1455;
				Match(PRAGMA_VERSION);
				State = 1456;
				Match(SCOPED_NAME);
				State = 1457;
				Match(VERSION_NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE() { return GetToken(IDLParser.LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(IDLParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(IDLParser.STRING_LITERAL, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 326, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1460;
			Match(LINE);
			State = 1461;
			Match(INTEGER_LITERAL);
			State = 1462;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
	 
		public IncludeContext() { }
		public virtual void CopyFrom(IncludeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreprocessorImportContext : IncludeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_declContext import_decl() {
			return GetRuleContext<Import_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(IDLParser.SEMICOLON, 0); }
		public PreprocessorImportContext(IncludeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorImport(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorImport(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorImport(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorIncludeContext : IncludeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARP() { return GetToken(IDLParser.SHARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(IDLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_textContext directive_text() {
			return GetRuleContext<Directive_textContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_LINE() { return GetToken(IDLParser.NEW_LINE, 0); }
		public PreprocessorIncludeContext(IncludeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 328, RULE_include);
		int _la;
		try {
			State = 1473;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SHARP:
				_localctx = new PreprocessorIncludeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1464;
				Match(SHARP);
				State = 1465;
				Match(INCLUDE);
				State = 1466;
				directive_text();
				State = 1467;
				Match(NEW_LINE);
				}
				break;
			case KW_IMPORT:
				_localctx = new PreprocessorImportContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1469;
				import_decl();
				State = 1471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 1470;
					Match(SEMICOLON);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
	 
		public DirectiveContext() { }
		public virtual void CopyFrom(DirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreprocessorDefContext : DirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFDEF() { return GetToken(IDLParser.IFDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL_SYMBOL() { return GetToken(IDLParser.CONDITIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNDEF() { return GetToken(IDLParser.IFNDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEF() { return GetToken(IDLParser.UNDEF, 0); }
		public PreprocessorDefContext(DirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorConditionalContext : DirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(IDLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(IDLParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(IDLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF() { return GetToken(IDLParser.ENDIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_textContext directive_text() {
			return GetRuleContext<Directive_textContext>(0);
		}
		public PreprocessorConditionalContext(DirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorConditional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorDefineContext : DirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(IDLParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL_SYMBOL() { return GetToken(IDLParser.CONDITIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_textContext directive_text() {
			return GetRuleContext<Directive_textContext>(0);
		}
		public PreprocessorDefineContext(DirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 330, RULE_directive);
		int _la;
		try {
			State = 1495;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1475;
				Match(IF);
				State = 1476;
				preprocessor_expression(0);
				}
				break;
			case ELIF:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1477;
				Match(ELIF);
				State = 1478;
				preprocessor_expression(0);
				}
				break;
			case ELSE:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1479;
				Match(ELSE);
				}
				break;
			case ENDIF:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1480;
				Match(ENDIF);
				State = 1482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEXT) {
					{
					State = 1481;
					directive_text();
					}
				}

				}
				break;
			case IFDEF:
				_localctx = new PreprocessorDefContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1484;
				Match(IFDEF);
				State = 1485;
				Match(CONDITIONAL_SYMBOL);
				}
				break;
			case IFNDEF:
				_localctx = new PreprocessorDefContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1486;
				Match(IFNDEF);
				State = 1487;
				Match(CONDITIONAL_SYMBOL);
				}
				break;
			case UNDEF:
				_localctx = new PreprocessorDefContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1488;
				Match(UNDEF);
				State = 1489;
				Match(CONDITIONAL_SYMBOL);
				}
				break;
			case DEFINE:
				_localctx = new PreprocessorDefineContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1490;
				Match(DEFINE);
				State = 1491;
				Match(CONDITIONAL_SYMBOL);
				State = 1493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEXT) {
					{
					State = 1492;
					directive_text();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Directive_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(IDLParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(IDLParser.TEXT, i);
		}
		public Directive_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterDirective_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitDirective_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Directive_textContext directive_text() {
		Directive_textContext _localctx = new Directive_textContext(Context, State);
		EnterRule(_localctx, 332, RULE_directive_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1497;
				Match(TEXT);
				}
				}
				State = 1500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TEXT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_expressionContext : ParserRuleContext {
		public Preprocessor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_expression; } }
	 
		public Preprocessor_expressionContext() { }
		public virtual void CopyFrom(Preprocessor_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreprocessorParenthesisContext : Preprocessor_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LPAREN() { return GetToken(IDLParser.OP_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RPAREN() { return GetToken(IDLParser.OP_RPAREN, 0); }
		public PreprocessorParenthesisContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorNotContext : Preprocessor_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BANG() { return GetToken(IDLParser.OP_BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		public PreprocessorNotContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorBinaryContext : Preprocessor_expressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext[] preprocessor_expression() {
			return GetRuleContexts<Preprocessor_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression(int i) {
			return GetRuleContext<Preprocessor_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(IDLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOTEQUAL() { return GetToken(IDLParser.OP_NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(IDLParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(IDLParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LT() { return GetToken(IDLParser.OP_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GT() { return GetToken(IDLParser.OP_GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(IDLParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(IDLParser.OP_GE, 0); }
		public PreprocessorBinaryContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorConstantContext : Preprocessor_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(IDLParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(IDLParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(IDLParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTIVE_STRING() { return GetToken(IDLParser.DIRECTIVE_STRING, 0); }
		public PreprocessorConstantContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorConditionalSymbolContext : Preprocessor_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL_SYMBOL() { return GetToken(IDLParser.CONDITIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LPAREN() { return GetToken(IDLParser.OP_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RPAREN() { return GetToken(IDLParser.OP_RPAREN, 0); }
		public PreprocessorConditionalSymbolContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorConditionalSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorConditionalSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorConditionalSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorDefinedContext : Preprocessor_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINED() { return GetToken(IDLParser.DEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL_SYMBOL() { return GetToken(IDLParser.CONDITIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LPAREN() { return GetToken(IDLParser.OP_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RPAREN() { return GetToken(IDLParser.OP_RPAREN, 0); }
		public PreprocessorDefinedContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorDefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLParserListener typedListener = listener as IIDLParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorDefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLParserVisitor<TResult> typedVisitor = visitor as IIDLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDefined(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_expressionContext preprocessor_expression() {
		return preprocessor_expression(0);
	}

	private Preprocessor_expressionContext preprocessor_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Preprocessor_expressionContext _localctx = new Preprocessor_expressionContext(Context, _parentState);
		Preprocessor_expressionContext _prevctx = _localctx;
		int _startState = 334;
		EnterRecursionRule(_localctx, 334, RULE_preprocessor_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1527;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				{
				_localctx = new PreprocessorConstantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1503;
				Match(TRUE);
				}
				break;
			case FALSE:
				{
				_localctx = new PreprocessorConstantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1504;
				Match(FALSE);
				}
				break;
			case DECIMAL_LITERAL:
				{
				_localctx = new PreprocessorConstantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1505;
				Match(DECIMAL_LITERAL);
				}
				break;
			case DIRECTIVE_STRING:
				{
				_localctx = new PreprocessorConstantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1506;
				Match(DIRECTIVE_STRING);
				}
				break;
			case CONDITIONAL_SYMBOL:
				{
				_localctx = new PreprocessorConditionalSymbolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1507;
				Match(CONDITIONAL_SYMBOL);
				State = 1512;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
				case 1:
					{
					State = 1508;
					Match(OP_LPAREN);
					State = 1509;
					preprocessor_expression(0);
					State = 1510;
					Match(OP_RPAREN);
					}
					break;
				}
				}
				break;
			case OP_LPAREN:
				{
				_localctx = new PreprocessorParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1514;
				Match(OP_LPAREN);
				State = 1515;
				preprocessor_expression(0);
				State = 1516;
				Match(OP_RPAREN);
				}
				break;
			case OP_BANG:
				{
				_localctx = new PreprocessorNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1518;
				Match(OP_BANG);
				State = 1519;
				preprocessor_expression(6);
				}
				break;
			case DEFINED:
				{
				_localctx = new PreprocessorDefinedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1520;
				Match(DEFINED);
				State = 1525;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CONDITIONAL_SYMBOL:
					{
					State = 1521;
					Match(CONDITIONAL_SYMBOL);
					}
					break;
				case OP_LPAREN:
					{
					State = 1522;
					Match(OP_LPAREN);
					State = 1523;
					Match(CONDITIONAL_SYMBOL);
					State = 1524;
					Match(OP_RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1543;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1541;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
					case 1:
						{
						_localctx = new PreprocessorBinaryContext(new Preprocessor_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 1529;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1530;
						((PreprocessorBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==OP_NOTEQUAL) ) {
							((PreprocessorBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1531;
						preprocessor_expression(6);
						}
						break;
					case 2:
						{
						_localctx = new PreprocessorBinaryContext(new Preprocessor_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 1532;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1533;
						((PreprocessorBinaryContext)_localctx).op = Match(OP_AND);
						State = 1534;
						preprocessor_expression(5);
						}
						break;
					case 3:
						{
						_localctx = new PreprocessorBinaryContext(new Preprocessor_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 1535;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1536;
						((PreprocessorBinaryContext)_localctx).op = Match(OP_OR);
						State = 1537;
						preprocessor_expression(4);
						}
						break;
					case 4:
						{
						_localctx = new PreprocessorBinaryContext(new Preprocessor_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 1538;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1539;
						((PreprocessorBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 15L) != 0)) ) {
							((PreprocessorBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1540;
						preprocessor_expression(3);
						}
						break;
					}
					} 
				}
				State = 1545;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 167: return preprocessor_expression_sempred((Preprocessor_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool preprocessor_expression_sempred(Preprocessor_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,158,1547,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,1,0,5,0,338,8,0,10,0,12,0,341,9,0,
		1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,3,1,365,8,1,1,1,1,1,3,1,369,8,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,392,
		8,1,1,2,1,2,1,2,1,2,1,2,4,2,399,8,2,11,2,12,2,400,1,2,1,2,1,3,1,3,1,3,
		3,3,408,8,3,1,4,1,4,1,4,1,4,1,4,1,5,3,5,416,8,5,1,5,1,5,1,5,1,6,3,6,422,
		8,6,1,6,1,6,1,6,3,6,427,8,6,1,7,5,7,430,8,7,10,7,12,7,433,9,7,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,452,8,
		8,1,8,1,8,3,8,456,8,8,3,8,458,8,8,1,9,1,9,1,9,1,9,5,9,464,8,9,10,9,12,
		9,467,9,9,1,10,1,10,1,11,3,11,472,8,11,1,11,1,11,1,11,5,11,477,8,11,10,
		11,12,11,480,9,11,1,12,1,12,1,12,1,12,1,12,3,12,487,8,12,1,13,3,13,490,
		8,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
		5,15,505,8,15,10,15,12,15,508,9,15,1,15,1,15,1,16,1,16,1,16,5,16,515,8,
		16,10,16,12,16,518,9,16,1,16,1,16,1,17,3,17,523,8,17,1,17,1,17,1,17,1,
		17,1,18,1,18,3,18,531,8,18,1,18,1,18,1,18,5,18,536,8,18,10,18,12,18,539,
		9,18,3,18,541,8,18,1,18,1,18,1,18,1,18,5,18,547,8,18,10,18,12,18,550,9,
		18,3,18,552,8,18,1,19,1,19,1,20,1,20,1,20,3,20,559,8,20,1,21,1,21,1,21,
		1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,572,8,22,1,22,1,22,3,22,576,
		8,22,1,22,1,22,1,23,1,23,1,23,5,23,583,8,23,10,23,12,23,586,9,23,1,24,
		1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,
		1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,612,8,27,1,28,1,28,1,
		29,1,29,1,29,5,29,619,8,29,10,29,12,29,622,9,29,1,30,1,30,1,30,5,30,627,
		8,30,10,30,12,30,630,9,30,1,31,1,31,1,31,5,31,635,8,31,10,31,12,31,638,
		9,31,1,32,1,32,1,32,5,32,643,8,32,10,32,12,32,646,9,32,1,33,1,33,1,33,
		5,33,651,8,33,10,33,12,33,654,9,33,1,34,1,34,1,34,5,34,659,8,34,10,34,
		12,34,662,9,34,1,35,1,35,1,35,1,35,3,35,668,8,35,1,36,1,36,1,37,1,37,1,
		37,1,37,1,37,1,37,3,37,678,8,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,40,
		1,40,1,40,1,40,1,40,3,40,692,8,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,
		42,1,43,1,43,1,43,1,44,1,44,3,44,707,8,44,1,45,1,45,1,45,3,45,712,8,45,
		1,46,1,46,1,46,3,46,717,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
		47,3,47,728,8,47,1,48,1,48,1,48,1,48,1,48,3,48,735,8,48,1,49,1,49,1,49,
		1,49,1,49,3,49,742,8,49,1,50,1,50,1,50,5,50,747,8,50,10,50,12,50,750,9,
		50,1,51,1,51,1,51,5,51,755,8,51,10,51,12,51,758,9,51,1,52,1,52,3,52,762,
		8,52,1,53,1,53,1,54,1,54,1,55,1,55,1,55,1,55,3,55,772,8,55,1,56,1,56,3,
		56,776,8,56,1,57,1,57,1,57,1,57,3,57,782,8,57,1,58,1,58,1,59,1,59,1,60,
		1,60,1,61,1,61,1,61,3,61,793,8,61,1,62,1,62,1,62,1,62,3,62,799,8,62,1,
		63,1,63,1,64,1,64,1,64,3,64,806,8,64,1,65,1,65,1,65,3,65,811,8,65,1,66,
		1,66,1,66,1,66,3,66,817,8,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,
		71,1,71,1,72,1,72,1,73,1,73,3,73,833,8,73,1,74,1,74,1,74,1,74,1,74,1,75,
		1,75,1,75,3,75,843,8,75,1,76,1,76,1,76,1,77,5,77,849,8,77,10,77,12,77,
		852,9,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,864,8,
		78,1,79,1,79,1,79,1,79,3,79,870,8,79,1,79,1,79,1,80,1,80,3,80,876,8,80,
		1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,3,82,886,8,82,1,82,1,82,4,82,890,
		8,82,11,82,12,82,891,1,82,1,82,1,83,1,83,3,83,898,8,83,1,83,1,83,1,84,
		1,84,1,84,1,84,1,84,1,84,3,84,908,8,84,1,84,1,84,1,85,1,85,1,85,1,85,1,
		85,1,85,1,85,5,85,919,8,85,10,85,12,85,922,9,85,1,85,1,85,1,86,1,86,1,
		86,1,87,1,87,1,87,1,87,1,87,3,87,934,8,87,1,87,1,87,1,87,1,87,1,88,5,88,
		941,8,88,10,88,12,88,944,9,88,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,
		1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,
		1,91,3,91,969,8,91,1,92,4,92,972,8,92,11,92,12,92,973,1,93,4,93,977,8,
		93,11,93,12,93,978,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,3,94,990,
		8,94,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,1003,
		8,96,10,96,12,96,1006,9,96,1,96,1,96,1,97,1,97,1,97,1,98,1,98,1,98,1,98,
		1,98,3,98,1018,8,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,
		1029,8,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,3,100,1038,8,100,1,101,
		1,101,1,101,1,101,1,101,3,101,1045,8,101,1,102,1,102,4,102,1049,8,102,
		11,102,12,102,1050,1,103,1,103,1,103,1,103,1,104,1,104,1,104,3,104,1060,
		8,104,1,105,1,105,1,105,1,105,1,105,5,105,1067,8,105,10,105,12,105,1070,
		9,105,1,105,1,105,1,106,1,106,3,106,1076,8,106,1,106,1,106,1,106,1,106,
		3,106,1082,8,106,1,106,3,106,1085,8,106,1,107,1,107,1,108,1,108,3,108,
		1091,8,108,1,109,1,109,1,109,1,109,5,109,1097,8,109,10,109,12,109,1100,
		9,109,3,109,1102,8,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,111,
		1,111,1,112,1,112,1,112,1,112,1,112,5,112,1118,8,112,10,112,12,112,1121,
		9,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,5,113,1130,8,113,10,113,
		12,113,1133,9,113,1,113,1,113,1,114,1,114,1,114,1,114,3,114,1141,8,114,
		1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,116,1,116,1,117,1,117,1,118,
		1,118,1,118,1,118,3,118,1158,8,118,1,119,1,119,1,119,1,120,1,120,3,120,
		1165,8,120,1,121,1,121,1,121,1,121,1,122,1,122,1,122,1,122,1,123,1,123,
		1,123,1,123,1,123,1,124,1,124,1,124,1,124,5,124,1184,8,124,10,124,12,124,
		1187,9,124,3,124,1189,8,124,1,125,1,125,1,125,1,125,1,126,1,126,1,126,
		1,126,5,126,1199,8,126,10,126,12,126,1202,9,126,3,126,1204,8,126,1,127,
		1,127,3,127,1208,8,127,1,127,3,127,1211,8,127,1,128,1,128,1,128,1,129,
		1,129,1,129,1,130,1,130,1,130,1,130,5,130,1223,8,130,10,130,12,130,1226,
		9,130,1,130,1,130,1,131,1,131,3,131,1232,8,131,1,132,1,132,1,132,1,132,
		1,133,1,133,1,133,1,133,1,133,1,133,1,134,1,134,1,134,3,134,1247,8,134,
		1,134,3,134,1250,8,134,1,135,1,135,1,135,1,135,5,135,1256,8,135,10,135,
		12,135,1259,9,135,1,136,1,136,1,136,1,137,5,137,1265,8,137,10,137,12,137,
		1268,9,137,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,
		1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,1289,8,138,
		1,139,1,139,1,139,1,139,1,140,1,140,3,140,1297,8,140,1,141,1,141,3,141,
		1301,8,141,1,141,1,141,1,141,1,142,1,142,1,142,1,142,1,143,1,143,1,143,
		1,143,1,144,1,144,1,144,1,144,1,145,1,145,1,145,1,146,1,146,1,146,3,146,
		1324,8,146,1,146,3,146,1327,8,146,1,146,1,146,1,146,3,146,1332,8,146,1,
		147,1,147,1,147,1,148,1,148,1,148,1,149,1,149,5,149,1342,8,149,10,149,
		12,149,1345,9,149,1,149,1,149,1,150,1,150,1,150,1,150,3,150,1353,8,150,
		1,150,1,150,3,150,1357,8,150,1,151,1,151,1,151,1,151,3,151,1363,8,151,
		1,151,1,151,3,151,1367,8,151,1,152,1,152,1,152,1,152,3,152,1373,8,152,
		1,152,1,152,3,152,1377,8,152,1,153,1,153,1,153,1,153,3,153,1383,8,153,
		1,154,3,154,1386,8,154,1,154,1,154,1,154,1,155,1,155,1,155,1,155,1,155,
		1,155,5,155,1397,8,155,10,155,12,155,1400,9,155,1,155,1,155,1,156,1,156,
		1,156,5,156,1407,8,156,10,156,12,156,1410,9,156,1,156,1,156,1,157,3,157,
		1415,8,157,1,157,1,157,1,157,1,157,1,158,5,158,1422,8,158,10,158,12,158,
		1425,9,158,1,159,1,159,1,159,1,159,1,159,1,159,3,159,1433,8,159,1,160,
		1,160,1,160,1,160,5,160,1439,8,160,10,160,12,160,1442,9,160,3,160,1444,
		8,160,1,161,1,161,1,161,1,161,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
		1,162,1,162,3,162,1459,8,162,1,163,1,163,1,163,1,163,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,3,164,1472,8,164,3,164,1474,8,164,1,165,1,165,
		1,165,1,165,1,165,1,165,1,165,3,165,1483,8,165,1,165,1,165,1,165,1,165,
		1,165,1,165,1,165,1,165,1,165,3,165,1494,8,165,3,165,1496,8,165,1,166,
		4,166,1499,8,166,11,166,12,166,1500,1,167,1,167,1,167,1,167,1,167,1,167,
		1,167,1,167,1,167,1,167,3,167,1513,8,167,1,167,1,167,1,167,1,167,1,167,
		1,167,1,167,1,167,1,167,1,167,1,167,3,167,1526,8,167,3,167,1528,8,167,
		1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
		5,167,1542,8,167,10,167,12,167,1545,9,167,1,167,0,1,334,168,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
		104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
		140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
		176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
		212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
		248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,
		284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,
		320,322,324,326,328,330,332,334,0,12,2,0,87,87,95,95,2,0,55,55,60,60,1,
		0,33,34,1,0,25,26,3,0,21,21,24,24,31,31,2,0,20,20,25,26,1,0,1,10,2,0,61,
		61,105,105,2,0,62,62,107,107,3,0,37,37,58,58,88,88,2,0,30,30,139,139,1,
		0,142,145,1603,0,339,1,0,0,0,2,391,1,0,0,0,4,393,1,0,0,0,6,404,1,0,0,0,
		8,409,1,0,0,0,10,415,1,0,0,0,12,421,1,0,0,0,14,431,1,0,0,0,16,457,1,0,
		0,0,18,459,1,0,0,0,20,468,1,0,0,0,22,471,1,0,0,0,24,481,1,0,0,0,26,489,
		1,0,0,0,28,494,1,0,0,0,30,498,1,0,0,0,32,511,1,0,0,0,34,522,1,0,0,0,36,
		540,1,0,0,0,38,553,1,0,0,0,40,558,1,0,0,0,42,560,1,0,0,0,44,566,1,0,0,
		0,46,579,1,0,0,0,48,587,1,0,0,0,50,592,1,0,0,0,52,594,1,0,0,0,54,611,1,
		0,0,0,56,613,1,0,0,0,58,615,1,0,0,0,60,623,1,0,0,0,62,631,1,0,0,0,64,639,
		1,0,0,0,66,647,1,0,0,0,68,655,1,0,0,0,70,667,1,0,0,0,72,669,1,0,0,0,74,
		677,1,0,0,0,76,679,1,0,0,0,78,681,1,0,0,0,80,691,1,0,0,0,82,693,1,0,0,
		0,84,697,1,0,0,0,86,701,1,0,0,0,88,706,1,0,0,0,90,711,1,0,0,0,92,716,1,
		0,0,0,94,727,1,0,0,0,96,734,1,0,0,0,98,741,1,0,0,0,100,743,1,0,0,0,102,
		751,1,0,0,0,104,761,1,0,0,0,106,763,1,0,0,0,108,765,1,0,0,0,110,771,1,
		0,0,0,112,775,1,0,0,0,114,781,1,0,0,0,116,783,1,0,0,0,118,785,1,0,0,0,
		120,787,1,0,0,0,122,792,1,0,0,0,124,798,1,0,0,0,126,800,1,0,0,0,128,805,
		1,0,0,0,130,810,1,0,0,0,132,816,1,0,0,0,134,818,1,0,0,0,136,820,1,0,0,
		0,138,822,1,0,0,0,140,824,1,0,0,0,142,826,1,0,0,0,144,828,1,0,0,0,146,
		832,1,0,0,0,148,834,1,0,0,0,150,839,1,0,0,0,152,844,1,0,0,0,154,850,1,
		0,0,0,156,863,1,0,0,0,158,865,1,0,0,0,160,875,1,0,0,0,162,877,1,0,0,0,
		164,880,1,0,0,0,166,895,1,0,0,0,168,901,1,0,0,0,170,911,1,0,0,0,172,925,
		1,0,0,0,174,928,1,0,0,0,176,942,1,0,0,0,178,945,1,0,0,0,180,950,1,0,0,
		0,182,968,1,0,0,0,184,971,1,0,0,0,186,976,1,0,0,0,188,989,1,0,0,0,190,
		991,1,0,0,0,192,995,1,0,0,0,194,1009,1,0,0,0,196,1012,1,0,0,0,198,1021,
		1,0,0,0,200,1032,1,0,0,0,202,1039,1,0,0,0,204,1046,1,0,0,0,206,1052,1,
		0,0,0,208,1056,1,0,0,0,210,1061,1,0,0,0,212,1073,1,0,0,0,214,1086,1,0,
		0,0,216,1090,1,0,0,0,218,1092,1,0,0,0,220,1105,1,0,0,0,222,1110,1,0,0,
		0,224,1112,1,0,0,0,226,1124,1,0,0,0,228,1140,1,0,0,0,230,1142,1,0,0,0,
		232,1149,1,0,0,0,234,1151,1,0,0,0,236,1157,1,0,0,0,238,1159,1,0,0,0,240,
		1164,1,0,0,0,242,1166,1,0,0,0,244,1170,1,0,0,0,246,1174,1,0,0,0,248,1179,
		1,0,0,0,250,1190,1,0,0,0,252,1194,1,0,0,0,254,1210,1,0,0,0,256,1212,1,
		0,0,0,258,1215,1,0,0,0,260,1218,1,0,0,0,262,1231,1,0,0,0,264,1233,1,0,
		0,0,266,1237,1,0,0,0,268,1243,1,0,0,0,270,1251,1,0,0,0,272,1260,1,0,0,
		0,274,1266,1,0,0,0,276,1269,1,0,0,0,278,1290,1,0,0,0,280,1296,1,0,0,0,
		282,1298,1,0,0,0,284,1305,1,0,0,0,286,1309,1,0,0,0,288,1313,1,0,0,0,290,
		1317,1,0,0,0,292,1320,1,0,0,0,294,1333,1,0,0,0,296,1336,1,0,0,0,298,1339,
		1,0,0,0,300,1356,1,0,0,0,302,1358,1,0,0,0,304,1368,1,0,0,0,306,1378,1,
		0,0,0,308,1385,1,0,0,0,310,1390,1,0,0,0,312,1403,1,0,0,0,314,1414,1,0,
		0,0,316,1423,1,0,0,0,318,1426,1,0,0,0,320,1443,1,0,0,0,322,1445,1,0,0,
		0,324,1458,1,0,0,0,326,1460,1,0,0,0,328,1473,1,0,0,0,330,1495,1,0,0,0,
		332,1498,1,0,0,0,334,1527,1,0,0,0,336,338,3,2,1,0,337,336,1,0,0,0,338,
		341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,339,1,
		0,0,0,342,343,5,0,0,1,343,1,1,0,0,0,344,345,3,80,40,0,345,346,5,11,0,0,
		346,392,1,0,0,0,347,348,3,52,26,0,348,349,5,11,0,0,349,392,1,0,0,0,350,
		351,3,210,105,0,351,352,5,11,0,0,352,392,1,0,0,0,353,354,3,6,3,0,354,355,
		5,11,0,0,355,392,1,0,0,0,356,357,3,4,2,0,357,358,5,11,0,0,358,392,1,0,
		0,0,359,360,3,24,12,0,360,361,5,11,0,0,361,392,1,0,0,0,362,364,3,242,121,
		0,363,365,5,11,0,0,364,363,1,0,0,0,364,365,1,0,0,0,365,392,1,0,0,0,366,
		368,3,244,122,0,367,369,5,11,0,0,368,367,1,0,0,0,368,369,1,0,0,0,369,392,
		1,0,0,0,370,371,3,306,153,0,371,372,5,11,0,0,372,392,1,0,0,0,373,374,3,
		262,131,0,374,375,5,11,0,0,375,392,1,0,0,0,376,377,3,290,145,0,377,378,
		5,11,0,0,378,392,1,0,0,0,379,380,3,146,73,0,380,381,5,11,0,0,381,392,1,
		0,0,0,382,392,3,328,164,0,383,384,5,116,0,0,384,385,3,330,165,0,385,386,
		5,151,0,0,386,392,1,0,0,0,387,388,5,116,0,0,388,392,3,324,162,0,389,390,
		5,116,0,0,390,392,3,326,163,0,391,344,1,0,0,0,391,347,1,0,0,0,391,350,
		1,0,0,0,391,353,1,0,0,0,391,356,1,0,0,0,391,359,1,0,0,0,391,362,1,0,0,
		0,391,366,1,0,0,0,391,370,1,0,0,0,391,373,1,0,0,0,391,376,1,0,0,0,391,
		379,1,0,0,0,391,382,1,0,0,0,391,383,1,0,0,0,391,387,1,0,0,0,391,389,1,
		0,0,0,392,3,1,0,0,0,393,394,3,316,158,0,394,395,5,74,0,0,395,396,5,112,
		0,0,396,398,5,14,0,0,397,399,3,2,1,0,398,397,1,0,0,0,399,400,1,0,0,0,400,
		398,1,0,0,0,400,401,1,0,0,0,401,402,1,0,0,0,402,403,5,15,0,0,403,5,1,0,
		0,0,404,407,3,316,158,0,405,408,3,8,4,0,406,408,3,10,5,0,407,405,1,0,0,
		0,407,406,1,0,0,0,408,7,1,0,0,0,409,410,3,12,6,0,410,411,5,14,0,0,411,
		412,3,14,7,0,412,413,5,15,0,0,413,9,1,0,0,0,414,416,7,0,0,0,415,414,1,
		0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,5,97,0,0,418,419,5,112,0,
		0,419,11,1,0,0,0,420,422,7,0,0,0,421,420,1,0,0,0,421,422,1,0,0,0,422,423,
		1,0,0,0,423,424,5,97,0,0,424,426,5,112,0,0,425,427,3,18,9,0,426,425,1,
		0,0,0,426,427,1,0,0,0,427,13,1,0,0,0,428,430,3,16,8,0,429,428,1,0,0,0,
		430,433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,15,1,0,0,0,433,431,
		1,0,0,0,434,435,3,80,40,0,435,436,5,11,0,0,436,458,1,0,0,0,437,438,3,52,
		26,0,438,439,5,11,0,0,439,458,1,0,0,0,440,441,3,210,105,0,441,442,5,11,
		0,0,442,458,1,0,0,0,443,444,3,208,104,0,444,445,5,11,0,0,445,458,1,0,0,
		0,446,447,3,212,106,0,447,448,5,11,0,0,448,458,1,0,0,0,449,451,3,242,121,
		0,450,452,5,11,0,0,451,450,1,0,0,0,451,452,1,0,0,0,452,458,1,0,0,0,453,
		455,3,244,122,0,454,456,5,11,0,0,455,454,1,0,0,0,455,456,1,0,0,0,456,458,
		1,0,0,0,457,434,1,0,0,0,457,437,1,0,0,0,457,440,1,0,0,0,457,443,1,0,0,
		0,457,446,1,0,0,0,457,449,1,0,0,0,457,453,1,0,0,0,458,17,1,0,0,0,459,460,
		5,12,0,0,460,465,3,20,10,0,461,462,5,13,0,0,462,464,3,20,10,0,463,461,
		1,0,0,0,464,467,1,0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,466,19,1,0,0,0,
		467,465,1,0,0,0,468,469,3,22,11,0,469,21,1,0,0,0,470,472,5,32,0,0,471,
		470,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,478,5,112,0,0,474,475,
		5,32,0,0,475,477,5,112,0,0,476,474,1,0,0,0,477,480,1,0,0,0,478,476,1,0,
		0,0,478,479,1,0,0,0,479,23,1,0,0,0,480,478,1,0,0,0,481,486,3,316,158,0,
		482,487,3,32,16,0,483,487,3,30,15,0,484,487,3,28,14,0,485,487,3,26,13,
		0,486,482,1,0,0,0,486,483,1,0,0,0,486,484,1,0,0,0,486,485,1,0,0,0,487,
		25,1,0,0,0,488,490,5,87,0,0,489,488,1,0,0,0,489,490,1,0,0,0,490,491,1,
		0,0,0,491,492,5,72,0,0,492,493,5,112,0,0,493,27,1,0,0,0,494,495,5,72,0,
		0,495,496,5,112,0,0,496,497,3,88,44,0,497,29,1,0,0,0,498,499,5,87,0,0,
		499,500,5,72,0,0,500,501,5,112,0,0,501,502,3,36,18,0,502,506,5,14,0,0,
		503,505,3,16,8,0,504,503,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,507,
		1,0,0,0,507,509,1,0,0,0,508,506,1,0,0,0,509,510,5,15,0,0,510,31,1,0,0,
		0,511,512,3,34,17,0,512,516,5,14,0,0,513,515,3,40,20,0,514,513,1,0,0,0,
		515,518,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,516,
		1,0,0,0,519,520,5,15,0,0,520,33,1,0,0,0,521,523,5,45,0,0,522,521,1,0,0,
		0,522,523,1,0,0,0,523,524,1,0,0,0,524,525,5,72,0,0,525,526,5,112,0,0,526,
		527,3,36,18,0,527,35,1,0,0,0,528,530,5,12,0,0,529,531,5,76,0,0,530,529,
		1,0,0,0,530,531,1,0,0,0,531,532,1,0,0,0,532,537,3,38,19,0,533,534,5,13,
		0,0,534,536,3,38,19,0,535,533,1,0,0,0,536,539,1,0,0,0,537,535,1,0,0,0,
		537,538,1,0,0,0,538,541,1,0,0,0,539,537,1,0,0,0,540,528,1,0,0,0,540,541,
		1,0,0,0,541,551,1,0,0,0,542,543,5,73,0,0,543,548,3,20,10,0,544,545,5,13,
		0,0,545,547,3,20,10,0,546,544,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,
		548,549,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,551,542,1,0,0,0,551,552,
		1,0,0,0,552,37,1,0,0,0,553,554,3,22,11,0,554,39,1,0,0,0,555,559,3,16,8,
		0,556,559,3,42,21,0,557,559,3,44,22,0,558,555,1,0,0,0,558,556,1,0,0,0,
		558,557,1,0,0,0,559,41,1,0,0,0,560,561,3,316,158,0,561,562,7,1,0,0,562,
		563,3,88,44,0,563,564,3,102,51,0,564,565,5,11,0,0,565,43,1,0,0,0,566,567,
		3,316,158,0,567,568,5,67,0,0,568,569,5,112,0,0,569,571,5,16,0,0,570,572,
		3,46,23,0,571,570,1,0,0,0,571,572,1,0,0,0,572,573,1,0,0,0,573,575,5,17,
		0,0,574,576,3,224,112,0,575,574,1,0,0,0,575,576,1,0,0,0,576,577,1,0,0,
		0,577,578,5,11,0,0,578,45,1,0,0,0,579,584,3,48,24,0,580,581,5,13,0,0,581,
		583,3,48,24,0,582,580,1,0,0,0,583,586,1,0,0,0,584,582,1,0,0,0,584,585,
		1,0,0,0,585,47,1,0,0,0,586,584,1,0,0,0,587,588,3,316,158,0,588,589,3,50,
		25,0,589,590,3,228,114,0,590,591,3,106,53,0,591,49,1,0,0,0,592,593,5,58,
		0,0,593,51,1,0,0,0,594,595,3,316,158,0,595,596,5,70,0,0,596,597,3,54,27,
		0,597,598,5,112,0,0,598,599,5,30,0,0,599,600,3,56,28,0,600,53,1,0,0,0,
		601,612,3,112,56,0,602,612,3,134,67,0,603,612,3,136,68,0,604,612,3,138,
		69,0,605,612,3,110,55,0,606,612,3,200,100,0,607,612,3,202,101,0,608,612,
		3,232,116,0,609,612,3,22,11,0,610,612,3,140,70,0,611,601,1,0,0,0,611,602,
		1,0,0,0,611,603,1,0,0,0,611,604,1,0,0,0,611,605,1,0,0,0,611,606,1,0,0,
		0,611,607,1,0,0,0,611,608,1,0,0,0,611,609,1,0,0,0,611,610,1,0,0,0,612,
		55,1,0,0,0,613,614,3,58,29,0,614,57,1,0,0,0,615,620,3,60,30,0,616,617,
		5,29,0,0,617,619,3,60,30,0,618,616,1,0,0,0,619,622,1,0,0,0,620,618,1,0,
		0,0,620,621,1,0,0,0,621,59,1,0,0,0,622,620,1,0,0,0,623,628,3,62,31,0,624,
		625,5,27,0,0,625,627,3,62,31,0,626,624,1,0,0,0,627,630,1,0,0,0,628,626,
		1,0,0,0,628,629,1,0,0,0,629,61,1,0,0,0,630,628,1,0,0,0,631,636,3,64,32,
		0,632,633,5,28,0,0,633,635,3,64,32,0,634,632,1,0,0,0,635,638,1,0,0,0,636,
		634,1,0,0,0,636,637,1,0,0,0,637,63,1,0,0,0,638,636,1,0,0,0,639,644,3,66,
		33,0,640,641,7,2,0,0,641,643,3,66,33,0,642,640,1,0,0,0,643,646,1,0,0,0,
		644,642,1,0,0,0,644,645,1,0,0,0,645,65,1,0,0,0,646,644,1,0,0,0,647,652,
		3,68,34,0,648,649,7,3,0,0,649,651,3,68,34,0,650,648,1,0,0,0,651,654,1,
		0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,67,1,0,0,0,654,652,1,0,0,0,655,
		660,3,70,35,0,656,657,7,4,0,0,657,659,3,70,35,0,658,656,1,0,0,0,659,662,
		1,0,0,0,660,658,1,0,0,0,660,661,1,0,0,0,661,69,1,0,0,0,662,660,1,0,0,0,
		663,664,3,72,36,0,664,665,3,74,37,0,665,668,1,0,0,0,666,668,3,74,37,0,
		667,663,1,0,0,0,667,666,1,0,0,0,668,71,1,0,0,0,669,670,7,5,0,0,670,73,
		1,0,0,0,671,678,3,22,11,0,672,678,3,76,38,0,673,674,5,16,0,0,674,675,3,
		56,28,0,675,676,5,17,0,0,676,678,1,0,0,0,677,671,1,0,0,0,677,672,1,0,0,
		0,677,673,1,0,0,0,678,75,1,0,0,0,679,680,7,6,0,0,680,77,1,0,0,0,681,682,
		3,56,28,0,682,79,1,0,0,0,683,692,3,82,41,0,684,692,3,174,87,0,685,692,
		3,180,90,0,686,692,3,192,96,0,687,692,3,164,82,0,688,692,3,170,85,0,689,
		692,3,84,42,0,690,692,3,236,118,0,691,683,1,0,0,0,691,684,1,0,0,0,691,
		685,1,0,0,0,691,686,1,0,0,0,691,687,1,0,0,0,691,688,1,0,0,0,691,689,1,
		0,0,0,691,690,1,0,0,0,692,81,1,0,0,0,693,694,3,316,158,0,694,695,5,42,
		0,0,695,696,3,86,43,0,696,83,1,0,0,0,697,698,3,316,158,0,698,699,5,50,
		0,0,699,700,3,100,50,0,700,85,1,0,0,0,701,702,3,88,44,0,702,703,3,102,
		51,0,703,87,1,0,0,0,704,707,3,90,45,0,705,707,3,98,49,0,706,704,1,0,0,
		0,706,705,1,0,0,0,707,89,1,0,0,0,708,712,3,94,47,0,709,712,3,96,48,0,710,
		712,3,22,11,0,711,708,1,0,0,0,711,709,1,0,0,0,711,710,1,0,0,0,712,91,1,
		0,0,0,713,717,3,112,56,0,714,717,3,138,69,0,715,717,3,140,70,0,716,713,
		1,0,0,0,716,714,1,0,0,0,716,715,1,0,0,0,717,93,1,0,0,0,718,728,3,110,55,
		0,719,728,3,112,56,0,720,728,3,134,67,0,721,728,3,136,68,0,722,728,3,138,
		69,0,723,728,3,140,70,0,724,728,3,142,71,0,725,728,3,144,72,0,726,728,
		3,234,117,0,727,718,1,0,0,0,727,719,1,0,0,0,727,720,1,0,0,0,727,721,1,
		0,0,0,727,722,1,0,0,0,727,723,1,0,0,0,727,724,1,0,0,0,727,725,1,0,0,0,
		727,726,1,0,0,0,728,95,1,0,0,0,729,735,3,196,98,0,730,735,3,198,99,0,731,
		735,3,200,100,0,732,735,3,202,101,0,733,735,3,230,115,0,734,729,1,0,0,
		0,734,730,1,0,0,0,734,731,1,0,0,0,734,732,1,0,0,0,734,733,1,0,0,0,735,
		97,1,0,0,0,736,742,3,174,87,0,737,742,3,180,90,0,738,742,3,192,96,0,739,
		742,3,164,82,0,740,742,3,170,85,0,741,736,1,0,0,0,741,737,1,0,0,0,741,
		738,1,0,0,0,741,739,1,0,0,0,741,740,1,0,0,0,742,99,1,0,0,0,743,748,5,112,
		0,0,744,745,5,13,0,0,745,747,5,112,0,0,746,744,1,0,0,0,747,750,1,0,0,0,
		748,746,1,0,0,0,748,749,1,0,0,0,749,101,1,0,0,0,750,748,1,0,0,0,751,756,
		3,104,52,0,752,753,5,13,0,0,753,755,3,104,52,0,754,752,1,0,0,0,755,758,
		1,0,0,0,756,754,1,0,0,0,756,757,1,0,0,0,757,103,1,0,0,0,758,756,1,0,0,
		0,759,762,3,106,53,0,760,762,3,108,54,0,761,759,1,0,0,0,761,760,1,0,0,
		0,762,105,1,0,0,0,763,764,5,112,0,0,764,107,1,0,0,0,765,766,3,204,102,
		0,766,109,1,0,0,0,767,772,5,84,0,0,768,772,5,91,0,0,769,770,5,62,0,0,770,
		772,5,91,0,0,771,767,1,0,0,0,771,768,1,0,0,0,771,769,1,0,0,0,772,111,1,
		0,0,0,773,776,3,114,57,0,774,776,3,124,62,0,775,773,1,0,0,0,775,774,1,
		0,0,0,776,113,1,0,0,0,777,782,3,118,59,0,778,782,3,120,60,0,779,782,3,
		122,61,0,780,782,3,116,58,0,781,777,1,0,0,0,781,778,1,0,0,0,781,779,1,
		0,0,0,781,780,1,0,0,0,782,115,1,0,0,0,783,784,5,103,0,0,784,117,1,0,0,
		0,785,786,7,7,0,0,786,119,1,0,0,0,787,788,7,8,0,0,788,121,1,0,0,0,789,
		790,5,62,0,0,790,793,5,62,0,0,791,793,5,109,0,0,792,789,1,0,0,0,792,791,
		1,0,0,0,793,123,1,0,0,0,794,799,3,128,64,0,795,799,3,130,65,0,796,799,
		3,132,66,0,797,799,3,126,63,0,798,794,1,0,0,0,798,795,1,0,0,0,798,796,
		1,0,0,0,798,797,1,0,0,0,799,125,1,0,0,0,800,801,5,104,0,0,801,127,1,0,
		0,0,802,803,5,77,0,0,803,806,5,61,0,0,804,806,5,106,0,0,805,802,1,0,0,
		0,805,804,1,0,0,0,806,129,1,0,0,0,807,808,5,77,0,0,808,811,5,62,0,0,809,
		811,5,108,0,0,810,807,1,0,0,0,810,809,1,0,0,0,811,131,1,0,0,0,812,813,
		5,77,0,0,813,814,5,62,0,0,814,817,5,62,0,0,815,817,5,110,0,0,816,812,1,
		0,0,0,816,815,1,0,0,0,817,133,1,0,0,0,818,819,5,82,0,0,819,135,1,0,0,0,
		820,821,5,57,0,0,821,137,1,0,0,0,822,823,5,85,0,0,823,139,1,0,0,0,824,
		825,5,46,0,0,825,141,1,0,0,0,826,827,5,81,0,0,827,143,1,0,0,0,828,829,
		5,75,0,0,829,145,1,0,0,0,830,833,3,148,74,0,831,833,3,162,81,0,832,830,
		1,0,0,0,832,831,1,0,0,0,833,147,1,0,0,0,834,835,3,150,75,0,835,836,5,14,
		0,0,836,837,3,154,77,0,837,838,5,15,0,0,838,149,1,0,0,0,839,840,5,111,
		0,0,840,842,5,112,0,0,841,843,3,152,76,0,842,841,1,0,0,0,842,843,1,0,0,
		0,843,151,1,0,0,0,844,845,5,12,0,0,845,846,3,22,11,0,846,153,1,0,0,0,847,
		849,3,156,78,0,848,847,1,0,0,0,849,852,1,0,0,0,850,848,1,0,0,0,850,851,
		1,0,0,0,851,155,1,0,0,0,852,850,1,0,0,0,853,864,3,158,79,0,854,855,3,192,
		96,0,855,856,5,11,0,0,856,864,1,0,0,0,857,858,3,52,26,0,858,859,5,11,0,
		0,859,864,1,0,0,0,860,861,3,82,41,0,861,862,5,11,0,0,862,864,1,0,0,0,863,
		853,1,0,0,0,863,854,1,0,0,0,863,857,1,0,0,0,863,860,1,0,0,0,864,157,1,
		0,0,0,865,866,3,160,80,0,866,869,3,106,53,0,867,868,5,59,0,0,868,870,3,
		56,28,0,869,867,1,0,0,0,869,870,1,0,0,0,870,871,1,0,0,0,871,872,5,11,0,
		0,872,159,1,0,0,0,873,876,3,54,27,0,874,876,3,142,71,0,875,873,1,0,0,0,
		875,874,1,0,0,0,876,161,1,0,0,0,877,878,5,111,0,0,878,879,5,112,0,0,879,
		163,1,0,0,0,880,881,3,316,158,0,881,882,5,101,0,0,882,885,5,112,0,0,883,
		884,5,12,0,0,884,886,3,22,11,0,885,883,1,0,0,0,885,886,1,0,0,0,886,887,
		1,0,0,0,887,889,5,14,0,0,888,890,3,166,83,0,889,888,1,0,0,0,890,891,1,
		0,0,0,891,889,1,0,0,0,891,892,1,0,0,0,892,893,1,0,0,0,893,894,5,15,0,0,
		894,165,1,0,0,0,895,897,3,168,84,0,896,898,3,100,50,0,897,896,1,0,0,0,
		897,898,1,0,0,0,898,899,1,0,0,0,899,900,5,11,0,0,900,167,1,0,0,0,901,902,
		3,316,158,0,902,903,5,100,0,0,903,904,5,22,0,0,904,907,3,78,39,0,905,906,
		5,13,0,0,906,908,3,92,46,0,907,905,1,0,0,0,907,908,1,0,0,0,908,909,1,0,
		0,0,909,910,5,23,0,0,910,169,1,0,0,0,911,912,3,316,158,0,912,913,5,102,
		0,0,913,914,5,112,0,0,914,915,5,14,0,0,915,920,3,172,86,0,916,917,5,13,
		0,0,917,919,3,172,86,0,918,916,1,0,0,0,919,922,1,0,0,0,920,918,1,0,0,0,
		920,921,1,0,0,0,921,923,1,0,0,0,922,920,1,0,0,0,923,924,5,15,0,0,924,171,
		1,0,0,0,925,926,3,316,158,0,926,927,5,112,0,0,927,173,1,0,0,0,928,929,
		3,316,158,0,929,930,5,49,0,0,930,933,5,112,0,0,931,932,5,12,0,0,932,934,
		3,22,11,0,933,931,1,0,0,0,933,934,1,0,0,0,934,935,1,0,0,0,935,936,5,14,
		0,0,936,937,3,176,88,0,937,938,5,15,0,0,938,175,1,0,0,0,939,941,3,178,
		89,0,940,939,1,0,0,0,941,944,1,0,0,0,942,940,1,0,0,0,942,943,1,0,0,0,943,
		177,1,0,0,0,944,942,1,0,0,0,945,946,3,316,158,0,946,947,3,88,44,0,947,
		948,3,102,51,0,948,949,5,11,0,0,949,179,1,0,0,0,950,951,3,316,158,0,951,
		952,5,79,0,0,952,953,5,112,0,0,953,954,5,40,0,0,954,955,5,16,0,0,955,956,
		3,182,91,0,956,957,5,17,0,0,957,958,5,14,0,0,958,959,3,184,92,0,959,960,
		5,15,0,0,960,181,1,0,0,0,961,969,3,112,56,0,962,969,3,134,67,0,963,969,
		3,136,68,0,964,969,3,140,70,0,965,969,3,138,69,0,966,969,3,192,96,0,967,
		969,3,22,11,0,968,961,1,0,0,0,968,962,1,0,0,0,968,963,1,0,0,0,968,964,
		1,0,0,0,968,965,1,0,0,0,968,966,1,0,0,0,968,967,1,0,0,0,969,183,1,0,0,
		0,970,972,3,186,93,0,971,970,1,0,0,0,972,973,1,0,0,0,973,971,1,0,0,0,973,
		974,1,0,0,0,974,185,1,0,0,0,975,977,3,188,94,0,976,975,1,0,0,0,977,978,
		1,0,0,0,978,976,1,0,0,0,978,979,1,0,0,0,979,980,1,0,0,0,980,981,3,190,
		95,0,981,982,5,11,0,0,982,187,1,0,0,0,983,984,5,83,0,0,984,985,3,56,28,
		0,985,986,5,12,0,0,986,990,1,0,0,0,987,988,5,59,0,0,988,990,5,12,0,0,989,
		983,1,0,0,0,989,987,1,0,0,0,990,189,1,0,0,0,991,992,3,316,158,0,992,993,
		3,88,44,0,993,994,3,104,52,0,994,191,1,0,0,0,995,996,3,316,158,0,996,997,
		5,63,0,0,997,998,5,112,0,0,998,999,5,14,0,0,999,1004,3,194,97,0,1000,1001,
		5,13,0,0,1001,1003,3,194,97,0,1002,1000,1,0,0,0,1003,1006,1,0,0,0,1004,
		1002,1,0,0,0,1004,1005,1,0,0,0,1005,1007,1,0,0,0,1006,1004,1,0,0,0,1007,
		1008,5,15,0,0,1008,193,1,0,0,0,1009,1010,3,316,158,0,1010,1011,5,112,0,
		0,1011,195,1,0,0,0,1012,1013,5,47,0,0,1013,1014,5,22,0,0,1014,1017,3,90,
		45,0,1015,1016,5,13,0,0,1016,1018,3,78,39,0,1017,1015,1,0,0,0,1017,1018,
		1,0,0,0,1018,1019,1,0,0,0,1019,1020,5,23,0,0,1020,197,1,0,0,0,1021,1022,
		5,99,0,0,1022,1023,5,22,0,0,1023,1024,3,90,45,0,1024,1025,5,13,0,0,1025,
		1028,3,90,45,0,1026,1027,5,13,0,0,1027,1029,3,78,39,0,1028,1026,1,0,0,
		0,1028,1029,1,0,0,0,1029,1030,1,0,0,0,1030,1031,5,23,0,0,1031,199,1,0,
		0,0,1032,1037,5,39,0,0,1033,1034,5,22,0,0,1034,1035,3,78,39,0,1035,1036,
		5,23,0,0,1036,1038,1,0,0,0,1037,1033,1,0,0,0,1037,1038,1,0,0,0,1038,201,
		1,0,0,0,1039,1044,5,64,0,0,1040,1041,5,22,0,0,1041,1042,3,78,39,0,1042,
		1043,5,23,0,0,1043,1045,1,0,0,0,1044,1040,1,0,0,0,1044,1045,1,0,0,0,1045,
		203,1,0,0,0,1046,1048,5,112,0,0,1047,1049,3,206,103,0,1048,1047,1,0,0,
		0,1049,1050,1,0,0,0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,205,1,0,0,
		0,1052,1053,5,18,0,0,1053,1054,3,78,39,0,1054,1055,5,19,0,0,1055,207,1,
		0,0,0,1056,1059,3,316,158,0,1057,1060,3,246,123,0,1058,1060,3,250,125,
		0,1059,1057,1,0,0,0,1059,1058,1,0,0,0,1060,209,1,0,0,0,1061,1062,3,316,
		158,0,1062,1063,5,68,0,0,1063,1064,5,112,0,0,1064,1068,5,14,0,0,1065,1067,
		3,178,89,0,1066,1065,1,0,0,0,1067,1070,1,0,0,0,1068,1066,1,0,0,0,1068,
		1069,1,0,0,0,1069,1071,1,0,0,0,1070,1068,1,0,0,0,1071,1072,5,15,0,0,1072,
		211,1,0,0,0,1073,1075,3,316,158,0,1074,1076,3,214,107,0,1075,1074,1,0,
		0,0,1075,1076,1,0,0,0,1076,1077,1,0,0,0,1077,1078,3,216,108,0,1078,1079,
		5,112,0,0,1079,1081,3,218,109,0,1080,1082,3,224,112,0,1081,1080,1,0,0,
		0,1081,1082,1,0,0,0,1082,1084,1,0,0,0,1083,1085,3,226,113,0,1084,1083,
		1,0,0,0,1084,1085,1,0,0,0,1085,213,1,0,0,0,1086,1087,5,80,0,0,1087,215,
		1,0,0,0,1088,1091,3,228,114,0,1089,1091,5,54,0,0,1090,1088,1,0,0,0,1090,
		1089,1,0,0,0,1091,217,1,0,0,0,1092,1101,5,16,0,0,1093,1098,3,220,110,0,
		1094,1095,5,13,0,0,1095,1097,3,220,110,0,1096,1094,1,0,0,0,1097,1100,1,
		0,0,0,1098,1096,1,0,0,0,1098,1099,1,0,0,0,1099,1102,1,0,0,0,1100,1098,
		1,0,0,0,1101,1093,1,0,0,0,1101,1102,1,0,0,0,1102,1103,1,0,0,0,1103,1104,
		5,17,0,0,1104,219,1,0,0,0,1105,1106,3,316,158,0,1106,1107,3,222,111,0,
		1107,1108,3,228,114,0,1108,1109,3,106,53,0,1109,221,1,0,0,0,1110,1111,
		7,9,0,0,1111,223,1,0,0,0,1112,1113,5,53,0,0,1113,1114,5,16,0,0,1114,1119,
		3,22,11,0,1115,1116,5,13,0,0,1116,1118,3,22,11,0,1117,1115,1,0,0,0,1118,
		1121,1,0,0,0,1119,1117,1,0,0,0,1119,1120,1,0,0,0,1120,1122,1,0,0,0,1121,
		1119,1,0,0,0,1122,1123,5,17,0,0,1123,225,1,0,0,0,1124,1125,5,65,0,0,1125,
		1126,5,16,0,0,1126,1131,5,9,0,0,1127,1128,5,13,0,0,1128,1130,5,9,0,0,1129,
		1127,1,0,0,0,1130,1133,1,0,0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,
		1134,1,0,0,0,1133,1131,1,0,0,0,1134,1135,5,17,0,0,1135,227,1,0,0,0,1136,
		1141,3,94,47,0,1137,1141,3,200,100,0,1138,1141,3,202,101,0,1139,1141,3,
		22,11,0,1140,1136,1,0,0,0,1140,1137,1,0,0,0,1140,1138,1,0,0,0,1140,1139,
		1,0,0,0,1141,229,1,0,0,0,1142,1143,5,78,0,0,1143,1144,5,22,0,0,1144,1145,
		3,78,39,0,1145,1146,5,13,0,0,1146,1147,3,78,39,0,1147,1148,5,23,0,0,1148,
		231,1,0,0,0,1149,1150,5,78,0,0,1150,233,1,0,0,0,1151,1152,5,71,0,0,1152,
		235,1,0,0,0,1153,1154,5,49,0,0,1154,1158,5,112,0,0,1155,1156,5,79,0,0,
		1156,1158,5,112,0,0,1157,1153,1,0,0,0,1157,1155,1,0,0,0,1158,237,1,0,0,
		0,1159,1160,5,48,0,0,1160,1161,3,240,120,0,1161,239,1,0,0,0,1162,1165,
		3,22,11,0,1163,1165,5,9,0,0,1164,1162,1,0,0,0,1164,1163,1,0,0,0,1165,241,
		1,0,0,0,1166,1167,5,93,0,0,1167,1168,3,22,11,0,1168,1169,5,9,0,0,1169,
		243,1,0,0,0,1170,1171,5,92,0,0,1171,1172,3,22,11,0,1172,1173,5,9,0,0,1173,
		245,1,0,0,0,1174,1175,5,51,0,0,1175,1176,5,94,0,0,1176,1177,3,228,114,
		0,1177,1178,3,248,124,0,1178,247,1,0,0,0,1179,1188,3,106,53,0,1180,1189,
		3,224,112,0,1181,1182,5,13,0,0,1182,1184,3,106,53,0,1183,1181,1,0,0,0,
		1184,1187,1,0,0,0,1185,1183,1,0,0,0,1185,1186,1,0,0,0,1186,1189,1,0,0,
		0,1187,1185,1,0,0,0,1188,1180,1,0,0,0,1188,1185,1,0,0,0,1189,249,1,0,0,
		0,1190,1191,5,94,0,0,1191,1192,3,228,114,0,1192,1193,3,252,126,0,1193,
		251,1,0,0,0,1194,1203,3,106,53,0,1195,1204,3,254,127,0,1196,1197,5,13,
		0,0,1197,1199,3,106,53,0,1198,1196,1,0,0,0,1199,1202,1,0,0,0,1200,1198,
		1,0,0,0,1200,1201,1,0,0,0,1201,1204,1,0,0,0,1202,1200,1,0,0,0,1203,1195,
		1,0,0,0,1203,1200,1,0,0,0,1204,253,1,0,0,0,1205,1207,3,256,128,0,1206,
		1208,3,258,129,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1211,1,0,0,0,
		1209,1211,3,258,129,0,1210,1205,1,0,0,0,1210,1209,1,0,0,0,1211,255,1,0,
		0,0,1212,1213,5,69,0,0,1213,1214,3,260,130,0,1214,257,1,0,0,0,1215,1216,
		5,36,0,0,1216,1217,3,260,130,0,1217,259,1,0,0,0,1218,1219,5,16,0,0,1219,
		1224,3,22,11,0,1220,1221,5,13,0,0,1221,1223,3,22,11,0,1222,1220,1,0,0,
		0,1223,1226,1,0,0,0,1224,1222,1,0,0,0,1224,1225,1,0,0,0,1225,1227,1,0,
		0,0,1226,1224,1,0,0,0,1227,1228,5,17,0,0,1228,261,1,0,0,0,1229,1232,3,
		266,133,0,1230,1232,3,264,132,0,1231,1229,1,0,0,0,1231,1230,1,0,0,0,1232,
		263,1,0,0,0,1233,1234,3,316,158,0,1234,1235,5,98,0,0,1235,1236,5,112,0,
		0,1236,265,1,0,0,0,1237,1238,3,316,158,0,1238,1239,3,268,134,0,1239,1240,
		5,14,0,0,1240,1241,3,274,137,0,1241,1242,5,15,0,0,1242,267,1,0,0,0,1243,
		1244,5,98,0,0,1244,1246,5,112,0,0,1245,1247,3,272,136,0,1246,1245,1,0,
		0,0,1246,1247,1,0,0,0,1247,1249,1,0,0,0,1248,1250,3,270,135,0,1249,1248,
		1,0,0,0,1249,1250,1,0,0,0,1250,269,1,0,0,0,1251,1252,5,73,0,0,1252,1257,
		3,22,11,0,1253,1254,5,13,0,0,1254,1256,3,22,11,0,1255,1253,1,0,0,0,1256,
		1259,1,0,0,0,1257,1255,1,0,0,0,1257,1258,1,0,0,0,1258,271,1,0,0,0,1259,
		1257,1,0,0,0,1260,1261,5,12,0,0,1261,1262,3,22,11,0,1262,273,1,0,0,0,1263,
		1265,3,276,138,0,1264,1263,1,0,0,0,1265,1268,1,0,0,0,1266,1264,1,0,0,0,
		1266,1267,1,0,0,0,1267,275,1,0,0,0,1268,1266,1,0,0,0,1269,1288,3,316,158,
		0,1270,1271,3,278,139,0,1271,1272,5,11,0,0,1272,1289,1,0,0,0,1273,1274,
		3,282,141,0,1274,1275,5,11,0,0,1275,1289,1,0,0,0,1276,1277,3,284,142,0,
		1277,1278,5,11,0,0,1278,1289,1,0,0,0,1279,1280,3,286,143,0,1280,1281,5,
		11,0,0,1281,1289,1,0,0,0,1282,1283,3,288,144,0,1283,1284,5,11,0,0,1284,
		1289,1,0,0,0,1285,1286,3,208,104,0,1286,1287,5,11,0,0,1287,1289,1,0,0,
		0,1288,1270,1,0,0,0,1288,1273,1,0,0,0,1288,1276,1,0,0,0,1288,1279,1,0,
		0,0,1288,1282,1,0,0,0,1288,1285,1,0,0,0,1289,277,1,0,0,0,1290,1291,5,89,
		0,0,1291,1292,3,280,140,0,1292,1293,5,112,0,0,1293,279,1,0,0,0,1294,1297,
		3,22,11,0,1295,1297,5,75,0,0,1296,1294,1,0,0,0,1296,1295,1,0,0,0,1297,
		281,1,0,0,0,1298,1300,5,43,0,0,1299,1301,5,86,0,0,1300,1299,1,0,0,0,1300,
		1301,1,0,0,0,1301,1302,1,0,0,0,1302,1303,3,280,140,0,1303,1304,5,112,0,
		0,1304,283,1,0,0,0,1305,1306,5,38,0,0,1306,1307,3,22,11,0,1307,1308,5,
		112,0,0,1308,285,1,0,0,0,1309,1310,5,41,0,0,1310,1311,3,22,11,0,1311,1312,
		5,112,0,0,1312,287,1,0,0,0,1313,1314,5,90,0,0,1314,1315,3,22,11,0,1315,
		1316,5,112,0,0,1316,289,1,0,0,0,1317,1318,3,292,146,0,1318,1319,3,298,
		149,0,1319,291,1,0,0,0,1320,1321,5,66,0,0,1321,1323,5,112,0,0,1322,1324,
		3,294,147,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,1326,1,0,0,0,1325,
		1327,3,270,135,0,1326,1325,1,0,0,0,1326,1327,1,0,0,0,1327,1328,1,0,0,0,
		1328,1329,5,96,0,0,1329,1331,3,22,11,0,1330,1332,3,296,148,0,1331,1330,
		1,0,0,0,1331,1332,1,0,0,0,1332,293,1,0,0,0,1333,1334,5,12,0,0,1334,1335,
		3,22,11,0,1335,295,1,0,0,0,1336,1337,5,44,0,0,1337,1338,3,22,11,0,1338,
		297,1,0,0,0,1339,1343,5,14,0,0,1340,1342,3,300,150,0,1341,1340,1,0,0,0,
		1342,1345,1,0,0,0,1343,1341,1,0,0,0,1343,1344,1,0,0,0,1344,1346,1,0,0,
		0,1345,1343,1,0,0,0,1346,1347,5,15,0,0,1347,299,1,0,0,0,1348,1357,3,16,
		8,0,1349,1352,3,316,158,0,1350,1353,3,302,151,0,1351,1353,3,304,152,0,
		1352,1350,1,0,0,0,1352,1351,1,0,0,0,1353,1354,1,0,0,0,1354,1355,5,11,0,
		0,1355,1357,1,0,0,0,1356,1348,1,0,0,0,1356,1349,1,0,0,0,1357,301,1,0,0,
		0,1358,1359,5,67,0,0,1359,1360,5,112,0,0,1360,1362,5,16,0,0,1361,1363,
		3,46,23,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,1364,1,0,0,0,1364,1366,
		5,17,0,0,1365,1367,3,224,112,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,
		303,1,0,0,0,1368,1369,5,52,0,0,1369,1370,5,112,0,0,1370,1372,5,16,0,0,
		1371,1373,3,46,23,0,1372,1371,1,0,0,0,1372,1373,1,0,0,0,1373,1374,1,0,
		0,0,1374,1376,5,17,0,0,1375,1377,3,224,112,0,1376,1375,1,0,0,0,1376,1377,
		1,0,0,0,1377,305,1,0,0,0,1378,1382,3,316,158,0,1379,1383,3,312,156,0,1380,
		1383,3,310,155,0,1381,1383,3,308,154,0,1382,1379,1,0,0,0,1382,1380,1,0,
		0,0,1382,1381,1,0,0,0,1383,307,1,0,0,0,1384,1386,5,87,0,0,1385,1384,1,
		0,0,0,1385,1386,1,0,0,0,1386,1387,1,0,0,0,1387,1388,5,56,0,0,1388,1389,
		5,112,0,0,1389,309,1,0,0,0,1390,1391,5,87,0,0,1391,1392,5,56,0,0,1392,
		1393,5,112,0,0,1393,1394,3,36,18,0,1394,1398,5,14,0,0,1395,1397,3,16,8,
		0,1396,1395,1,0,0,0,1397,1400,1,0,0,0,1398,1396,1,0,0,0,1398,1399,1,0,
		0,0,1399,1401,1,0,0,0,1400,1398,1,0,0,0,1401,1402,5,15,0,0,1402,311,1,
		0,0,0,1403,1404,3,314,157,0,1404,1408,5,14,0,0,1405,1407,3,40,20,0,1406,
		1405,1,0,0,0,1407,1410,1,0,0,0,1408,1406,1,0,0,0,1408,1409,1,0,0,0,1409,
		1411,1,0,0,0,1410,1408,1,0,0,0,1411,1412,5,15,0,0,1412,313,1,0,0,0,1413,
		1415,5,45,0,0,1414,1413,1,0,0,0,1414,1415,1,0,0,0,1415,1416,1,0,0,0,1416,
		1417,5,56,0,0,1417,1418,5,112,0,0,1418,1419,3,36,18,0,1419,315,1,0,0,0,
		1420,1422,3,318,159,0,1421,1420,1,0,0,0,1422,1425,1,0,0,0,1423,1421,1,
		0,0,0,1423,1424,1,0,0,0,1424,317,1,0,0,0,1425,1423,1,0,0,0,1426,1427,5,
		35,0,0,1427,1432,3,22,11,0,1428,1429,5,16,0,0,1429,1430,3,320,160,0,1430,
		1431,5,17,0,0,1431,1433,1,0,0,0,1432,1428,1,0,0,0,1432,1433,1,0,0,0,1433,
		319,1,0,0,0,1434,1444,3,56,28,0,1435,1440,3,322,161,0,1436,1437,5,13,0,
		0,1437,1439,3,322,161,0,1438,1436,1,0,0,0,1439,1442,1,0,0,0,1440,1438,
		1,0,0,0,1440,1441,1,0,0,0,1441,1444,1,0,0,0,1442,1440,1,0,0,0,1443,1434,
		1,0,0,0,1443,1435,1,0,0,0,1444,321,1,0,0,0,1445,1446,5,112,0,0,1446,1447,
		5,30,0,0,1447,1448,3,56,28,0,1448,323,1,0,0,0,1449,1450,5,121,0,0,1450,
		1459,5,9,0,0,1451,1452,5,122,0,0,1452,1453,3,22,11,0,1453,1454,5,9,0,0,
		1454,1459,1,0,0,0,1455,1456,5,120,0,0,1456,1457,5,157,0,0,1457,1459,5,
		158,0,0,1458,1449,1,0,0,0,1458,1451,1,0,0,0,1458,1455,1,0,0,0,1459,325,
		1,0,0,0,1460,1461,5,118,0,0,1461,1462,5,1,0,0,1462,1463,5,9,0,0,1463,327,
		1,0,0,0,1464,1465,5,116,0,0,1465,1466,5,117,0,0,1466,1467,3,332,166,0,
		1467,1468,5,151,0,0,1468,1474,1,0,0,0,1469,1471,3,238,119,0,1470,1472,
		5,11,0,0,1471,1470,1,0,0,0,1471,1472,1,0,0,0,1472,1474,1,0,0,0,1473,1464,
		1,0,0,0,1473,1469,1,0,0,0,1474,329,1,0,0,0,1475,1476,5,125,0,0,1476,1496,
		3,334,167,0,1477,1478,5,126,0,0,1478,1496,3,334,167,0,1479,1496,5,127,
		0,0,1480,1482,5,131,0,0,1481,1483,3,332,166,0,1482,1481,1,0,0,0,1482,1483,
		1,0,0,0,1483,1496,1,0,0,0,1484,1485,5,129,0,0,1485,1496,5,148,0,0,1486,
		1487,5,130,0,0,1487,1496,5,148,0,0,1488,1489,5,128,0,0,1489,1496,5,148,
		0,0,1490,1491,5,123,0,0,1491,1493,5,148,0,0,1492,1494,3,332,166,0,1493,
		1492,1,0,0,0,1493,1494,1,0,0,0,1494,1496,1,0,0,0,1495,1475,1,0,0,0,1495,
		1477,1,0,0,0,1495,1479,1,0,0,0,1495,1480,1,0,0,0,1495,1484,1,0,0,0,1495,
		1486,1,0,0,0,1495,1488,1,0,0,0,1495,1490,1,0,0,0,1496,331,1,0,0,0,1497,
		1499,5,156,0,0,1498,1497,1,0,0,0,1499,1500,1,0,0,0,1500,1498,1,0,0,0,1500,
		1501,1,0,0,0,1501,333,1,0,0,0,1502,1503,6,167,-1,0,1503,1528,5,132,0,0,
		1504,1528,5,133,0,0,1505,1528,5,149,0,0,1506,1528,5,147,0,0,1507,1512,
		5,148,0,0,1508,1509,5,136,0,0,1509,1510,3,334,167,0,1510,1511,5,137,0,
		0,1511,1513,1,0,0,0,1512,1508,1,0,0,0,1512,1513,1,0,0,0,1513,1528,1,0,
		0,0,1514,1515,5,136,0,0,1515,1516,3,334,167,0,1516,1517,5,137,0,0,1517,
		1528,1,0,0,0,1518,1519,5,135,0,0,1519,1528,3,334,167,6,1520,1525,5,124,
		0,0,1521,1526,5,148,0,0,1522,1523,5,136,0,0,1523,1524,5,148,0,0,1524,1526,
		5,137,0,0,1525,1521,1,0,0,0,1525,1522,1,0,0,0,1526,1528,1,0,0,0,1527,1502,
		1,0,0,0,1527,1504,1,0,0,0,1527,1505,1,0,0,0,1527,1506,1,0,0,0,1527,1507,
		1,0,0,0,1527,1514,1,0,0,0,1527,1518,1,0,0,0,1527,1520,1,0,0,0,1528,1543,
		1,0,0,0,1529,1530,10,5,0,0,1530,1531,7,10,0,0,1531,1542,3,334,167,6,1532,
		1533,10,4,0,0,1533,1534,5,140,0,0,1534,1542,3,334,167,5,1535,1536,10,3,
		0,0,1536,1537,5,141,0,0,1537,1542,3,334,167,4,1538,1539,10,2,0,0,1539,
		1540,7,11,0,0,1540,1542,3,334,167,3,1541,1529,1,0,0,0,1541,1532,1,0,0,
		0,1541,1535,1,0,0,0,1541,1538,1,0,0,0,1542,1545,1,0,0,0,1543,1541,1,0,
		0,0,1543,1544,1,0,0,0,1544,335,1,0,0,0,1545,1543,1,0,0,0,139,339,364,368,
		391,400,407,415,421,426,431,451,455,457,465,471,478,486,489,506,516,522,
		530,537,540,548,551,558,571,575,584,611,620,628,636,644,652,660,667,677,
		691,706,711,716,727,734,741,748,756,761,771,775,781,792,798,805,810,816,
		832,842,850,863,869,875,885,891,897,907,920,933,942,968,973,978,989,1004,
		1017,1028,1037,1044,1050,1059,1068,1075,1081,1084,1090,1098,1101,1119,
		1131,1140,1157,1164,1185,1188,1200,1203,1207,1210,1224,1231,1246,1249,
		1257,1266,1288,1296,1300,1323,1326,1331,1343,1352,1356,1362,1366,1372,
		1376,1382,1385,1398,1408,1414,1423,1432,1440,1443,1458,1471,1473,1482,
		1493,1495,1500,1512,1525,1527,1541,1543
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DotNetOrb.IdlCompiler
