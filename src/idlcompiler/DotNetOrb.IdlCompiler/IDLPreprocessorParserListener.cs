//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:/DotNetOrb/src/idlcompiler/IDL.Grammar/IDLPreprocessorParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotNetOrb.IdlCompiler {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="IDLPreprocessorParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IIDLPreprocessorParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="IDLPreprocessorParser.idlDocument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdlDocument([NotNull] IDLPreprocessorParser.IdlDocumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IDLPreprocessorParser.idlDocument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdlDocument([NotNull] IDLPreprocessorParser.IdlDocumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IDLPreprocessorParser.text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterText([NotNull] IDLPreprocessorParser.TextContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IDLPreprocessorParser.text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitText([NotNull] IDLPreprocessorParser.TextContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IDLPreprocessorParser.code"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode([NotNull] IDLPreprocessorParser.CodeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IDLPreprocessorParser.code"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode([NotNull] IDLPreprocessorParser.CodeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorInclude</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.include"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorInclude([NotNull] IDLPreprocessorParser.PreprocessorIncludeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorInclude</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.include"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorInclude([NotNull] IDLPreprocessorParser.PreprocessorIncludeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorPragmaPrefix</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.pragma"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorPragmaPrefix([NotNull] IDLPreprocessorParser.PreprocessorPragmaPrefixContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorPragmaPrefix</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.pragma"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorPragmaPrefix([NotNull] IDLPreprocessorParser.PreprocessorPragmaPrefixContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorPragma</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.pragma"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorPragma([NotNull] IDLPreprocessorParser.PreprocessorPragmaContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorPragma</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.pragma"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorPragma([NotNull] IDLPreprocessorParser.PreprocessorPragmaContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorConditional</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorConditional([NotNull] IDLPreprocessorParser.PreprocessorConditionalContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorConditional</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorConditional([NotNull] IDLPreprocessorParser.PreprocessorConditionalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorDef</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorDef([NotNull] IDLPreprocessorParser.PreprocessorDefContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorDef</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorDef([NotNull] IDLPreprocessorParser.PreprocessorDefContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorError</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorError([NotNull] IDLPreprocessorParser.PreprocessorErrorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorError</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorError([NotNull] IDLPreprocessorParser.PreprocessorErrorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorDefine</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorDefine([NotNull] IDLPreprocessorParser.PreprocessorDefineContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorDefine</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorDefine([NotNull] IDLPreprocessorParser.PreprocessorDefineContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IDLPreprocessorParser.directive_text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirective_text([NotNull] IDLPreprocessorParser.Directive_textContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IDLPreprocessorParser.directive_text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirective_text([NotNull] IDLPreprocessorParser.Directive_textContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorParenthesis</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorParenthesis([NotNull] IDLPreprocessorParser.PreprocessorParenthesisContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorParenthesis</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorParenthesis([NotNull] IDLPreprocessorParser.PreprocessorParenthesisContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorNot</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorNot([NotNull] IDLPreprocessorParser.PreprocessorNotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorNot</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorNot([NotNull] IDLPreprocessorParser.PreprocessorNotContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorBinary</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorBinary([NotNull] IDLPreprocessorParser.PreprocessorBinaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorBinary</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorBinary([NotNull] IDLPreprocessorParser.PreprocessorBinaryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorConstant</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorConstant([NotNull] IDLPreprocessorParser.PreprocessorConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorConstant</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorConstant([NotNull] IDLPreprocessorParser.PreprocessorConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorConditionalSymbol</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorConditionalSymbol([NotNull] IDLPreprocessorParser.PreprocessorConditionalSymbolContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorConditionalSymbol</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorConditionalSymbol([NotNull] IDLPreprocessorParser.PreprocessorConditionalSymbolContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorDefined</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorDefined([NotNull] IDLPreprocessorParser.PreprocessorDefinedContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorDefined</c>
	/// labeled alternative in <see cref="IDLPreprocessorParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorDefined([NotNull] IDLPreprocessorParser.PreprocessorDefinedContext context);
}
} // namespace DotNetOrb.IdlCompiler
