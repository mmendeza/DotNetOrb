//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:/DotNetOrb/src/idlcompiler/IDL.Grammar/IDLPreprocessorParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotNetOrb.IdlCompiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class IDLPreprocessorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SHARP=1, CODE=2, IMPORT=3, INCLUDE=4, PRAGMA=5, PREFIX=6, DEFINE=7, DEFINED=8, 
		IF=9, ELIF=10, ELSE=11, UNDEF=12, IFDEF=13, IFNDEF=14, ENDIF=15, TRUE=16, 
		FALSE=17, ERROR=18, BANG=19, LPAREN=20, RPAREN=21, EQUAL=22, NOTEQUAL=23, 
		AND=24, OR=25, LT=26, GT=27, LE=28, GE=29, DIRECTIVE_WHITESPACES=30, DIRECTIVE_STRING=31, 
		CONDITIONAL_SYMBOL=32, DECIMAL_LITERAL=33, FLOAT=34, NEW_LINE=35, DIRECTIVE_COMMENT=36, 
		DIRECTIVE_LINE_COMMENT=37, DIRECITVE_NEW_LINE=38, DIRECTIVE_TEXT_NEW_LINE=39, 
		TEXT=40, SLASH=41, SEMICOLON=42;
	public const int
		RULE_idlDocument = 0, RULE_text = 1, RULE_code = 2, RULE_include = 3, 
		RULE_pragma = 4, RULE_directive = 5, RULE_directive_text = 6, RULE_preprocessor_expression = 7;
	public static readonly string[] ruleNames = {
		"idlDocument", "text", "code", "include", "pragma", "directive", "directive_text", 
		"preprocessor_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", null, null, null, "'pragma'", "'prefix'", null, "'defined'", 
		"'if'", "'elif'", "'else'", "'undef'", "'ifdef'", "'ifndef'", "'endif'", 
		null, null, "'error'", "'!'", "'('", "')'", "'=='", "'!='", "'&&'", "'||'", 
		"'<'", "'>'", "'<='", "'>='", null, null, null, null, null, null, null, 
		null, null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SHARP", "CODE", "IMPORT", "INCLUDE", "PRAGMA", "PREFIX", "DEFINE", 
		"DEFINED", "IF", "ELIF", "ELSE", "UNDEF", "IFDEF", "IFNDEF", "ENDIF", 
		"TRUE", "FALSE", "ERROR", "BANG", "LPAREN", "RPAREN", "EQUAL", "NOTEQUAL", 
		"AND", "OR", "LT", "GT", "LE", "GE", "DIRECTIVE_WHITESPACES", "DIRECTIVE_STRING", 
		"CONDITIONAL_SYMBOL", "DECIMAL_LITERAL", "FLOAT", "NEW_LINE", "DIRECTIVE_COMMENT", 
		"DIRECTIVE_LINE_COMMENT", "DIRECITVE_NEW_LINE", "DIRECTIVE_TEXT_NEW_LINE", 
		"TEXT", "SLASH", "SEMICOLON"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "IDLPreprocessorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static IDLPreprocessorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IDLPreprocessorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IDLPreprocessorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IdlDocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(IDLPreprocessorParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public IdlDocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idlDocument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterIdlDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitIdlDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdlDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdlDocumentContext idlDocument() {
		IdlDocumentContext _localctx = new IdlDocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_idlDocument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SHARP || _la==CODE) {
				{
				{
				State = 16;
				text();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 22;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARP() { return GetToken(IDLPreprocessorParser.SHARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_LINE() { return GetToken(IDLPreprocessorParser.NEW_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(IDLPreprocessorParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 2, RULE_text);
		int _la;
		try {
			State = 37;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24;
				Match(SHARP);
				State = 25;
				include();
				State = 26;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEW_LINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 28;
				Match(SHARP);
				State = 29;
				directive();
				State = 30;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEW_LINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 32;
				Match(SHARP);
				State = 33;
				pragma();
				State = 34;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEW_LINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 36;
				code();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CODE() { return GetTokens(IDLPreprocessorParser.CODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE(int i) {
			return GetToken(IDLPreprocessorParser.CODE, i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 4, RULE_code);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 39;
					Match(CODE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 42;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
	 
		public IncludeContext() { }
		public virtual void CopyFrom(IncludeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreprocessorIncludeContext : IncludeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(IDLPreprocessorParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_textContext directive_text() {
			return GetRuleContext<Directive_textContext>(0);
		}
		public PreprocessorIncludeContext(IncludeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 6, RULE_include);
		try {
			_localctx = new PreprocessorIncludeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(INCLUDE);
			State = 45;
			directive_text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
	 
		public PragmaContext() { }
		public virtual void CopyFrom(PragmaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreprocessorPragmaPrefixContext : PragmaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(IDLPreprocessorParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREFIX() { return GetToken(IDLPreprocessorParser.PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_textContext directive_text() {
			return GetRuleContext<Directive_textContext>(0);
		}
		public PreprocessorPragmaPrefixContext(PragmaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorPragmaPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorPragmaPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorPragmaPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorPragmaContext : PragmaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(IDLPreprocessorParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_textContext directive_text() {
			return GetRuleContext<Directive_textContext>(0);
		}
		public PreprocessorPragmaContext(PragmaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorPragma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorPragma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(Context, State);
		EnterRule(_localctx, 8, RULE_pragma);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new PreprocessorPragmaPrefixContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 47;
				Match(PRAGMA);
				State = 48;
				Match(PREFIX);
				State = 49;
				directive_text();
				}
				break;
			case 2:
				_localctx = new PreprocessorPragmaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 50;
				Match(PRAGMA);
				State = 51;
				directive_text();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
	 
		public DirectiveContext() { }
		public virtual void CopyFrom(DirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreprocessorDefContext : DirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFDEF() { return GetToken(IDLPreprocessorParser.IFDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL_SYMBOL() { return GetToken(IDLPreprocessorParser.CONDITIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNDEF() { return GetToken(IDLPreprocessorParser.IFNDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEF() { return GetToken(IDLPreprocessorParser.UNDEF, 0); }
		public PreprocessorDefContext(DirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorErrorContext : DirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(IDLPreprocessorParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_textContext directive_text() {
			return GetRuleContext<Directive_textContext>(0);
		}
		public PreprocessorErrorContext(DirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorError(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorConditionalContext : DirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(IDLPreprocessorParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(IDLPreprocessorParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(IDLPreprocessorParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF() { return GetToken(IDLPreprocessorParser.ENDIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_textContext directive_text() {
			return GetRuleContext<Directive_textContext>(0);
		}
		public PreprocessorConditionalContext(DirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorConditional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorDefineContext : DirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(IDLPreprocessorParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL_SYMBOL() { return GetToken(IDLPreprocessorParser.CONDITIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_textContext directive_text() {
			return GetRuleContext<Directive_textContext>(0);
		}
		public PreprocessorDefineContext(DirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 10, RULE_directive);
		int _la;
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				Match(IF);
				State = 55;
				preprocessor_expression(0);
				}
				break;
			case ELIF:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 56;
				Match(ELIF);
				State = 57;
				preprocessor_expression(0);
				}
				break;
			case ELSE:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 58;
				Match(ELSE);
				}
				break;
			case ENDIF:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 59;
				Match(ENDIF);
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEXT) {
					{
					State = 60;
					directive_text();
					}
				}

				}
				break;
			case IFDEF:
				_localctx = new PreprocessorDefContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 63;
				Match(IFDEF);
				State = 64;
				Match(CONDITIONAL_SYMBOL);
				}
				break;
			case IFNDEF:
				_localctx = new PreprocessorDefContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 65;
				Match(IFNDEF);
				State = 66;
				Match(CONDITIONAL_SYMBOL);
				}
				break;
			case UNDEF:
				_localctx = new PreprocessorDefContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 67;
				Match(UNDEF);
				State = 68;
				Match(CONDITIONAL_SYMBOL);
				}
				break;
			case ERROR:
				_localctx = new PreprocessorErrorContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 69;
				Match(ERROR);
				State = 70;
				directive_text();
				}
				break;
			case DEFINE:
				_localctx = new PreprocessorDefineContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 71;
				Match(DEFINE);
				State = 72;
				Match(CONDITIONAL_SYMBOL);
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEXT) {
					{
					State = 73;
					directive_text();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Directive_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(IDLPreprocessorParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(IDLPreprocessorParser.TEXT, i);
		}
		public Directive_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterDirective_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitDirective_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Directive_textContext directive_text() {
		Directive_textContext _localctx = new Directive_textContext(Context, State);
		EnterRule(_localctx, 12, RULE_directive_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 78;
				Match(TEXT);
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TEXT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_expressionContext : ParserRuleContext {
		public Preprocessor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_expression; } }
	 
		public Preprocessor_expressionContext() { }
		public virtual void CopyFrom(Preprocessor_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreprocessorParenthesisContext : Preprocessor_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(IDLPreprocessorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(IDLPreprocessorParser.RPAREN, 0); }
		public PreprocessorParenthesisContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorNotContext : Preprocessor_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(IDLPreprocessorParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		public PreprocessorNotContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorBinaryContext : Preprocessor_expressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext[] preprocessor_expression() {
			return GetRuleContexts<Preprocessor_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression(int i) {
			return GetRuleContext<Preprocessor_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(IDLPreprocessorParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(IDLPreprocessorParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(IDLPreprocessorParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(IDLPreprocessorParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(IDLPreprocessorParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(IDLPreprocessorParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(IDLPreprocessorParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(IDLPreprocessorParser.GE, 0); }
		public PreprocessorBinaryContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorConstantContext : Preprocessor_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(IDLPreprocessorParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(IDLPreprocessorParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(IDLPreprocessorParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTIVE_STRING() { return GetToken(IDLPreprocessorParser.DIRECTIVE_STRING, 0); }
		public PreprocessorConstantContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorConditionalSymbolContext : Preprocessor_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL_SYMBOL() { return GetToken(IDLPreprocessorParser.CONDITIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(IDLPreprocessorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(IDLPreprocessorParser.RPAREN, 0); }
		public PreprocessorConditionalSymbolContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorConditionalSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorConditionalSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorConditionalSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorDefinedContext : Preprocessor_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINED() { return GetToken(IDLPreprocessorParser.DEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL_SYMBOL() { return GetToken(IDLPreprocessorParser.CONDITIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(IDLPreprocessorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(IDLPreprocessorParser.RPAREN, 0); }
		public PreprocessorDefinedContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorDefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIDLPreprocessorParserListener typedListener = listener as IIDLPreprocessorParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorDefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIDLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IIDLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDefined(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_expressionContext preprocessor_expression() {
		return preprocessor_expression(0);
	}

	private Preprocessor_expressionContext preprocessor_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Preprocessor_expressionContext _localctx = new Preprocessor_expressionContext(Context, _parentState);
		Preprocessor_expressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_preprocessor_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				{
				_localctx = new PreprocessorConstantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 84;
				Match(TRUE);
				}
				break;
			case FALSE:
				{
				_localctx = new PreprocessorConstantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 85;
				Match(FALSE);
				}
				break;
			case DECIMAL_LITERAL:
				{
				_localctx = new PreprocessorConstantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 86;
				Match(DECIMAL_LITERAL);
				}
				break;
			case DIRECTIVE_STRING:
				{
				_localctx = new PreprocessorConstantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 87;
				Match(DIRECTIVE_STRING);
				}
				break;
			case CONDITIONAL_SYMBOL:
				{
				_localctx = new PreprocessorConditionalSymbolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 88;
				Match(CONDITIONAL_SYMBOL);
				State = 93;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 89;
					Match(LPAREN);
					State = 90;
					preprocessor_expression(0);
					State = 91;
					Match(RPAREN);
					}
					break;
				}
				}
				break;
			case LPAREN:
				{
				_localctx = new PreprocessorParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 95;
				Match(LPAREN);
				State = 96;
				preprocessor_expression(0);
				State = 97;
				Match(RPAREN);
				}
				break;
			case BANG:
				{
				_localctx = new PreprocessorNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 99;
				Match(BANG);
				State = 100;
				preprocessor_expression(6);
				}
				break;
			case DEFINED:
				{
				_localctx = new PreprocessorDefinedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 101;
				Match(DEFINED);
				State = 106;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CONDITIONAL_SYMBOL:
					{
					State = 102;
					Match(CONDITIONAL_SYMBOL);
					}
					break;
				case LPAREN:
					{
					State = 103;
					Match(LPAREN);
					State = 104;
					Match(CONDITIONAL_SYMBOL);
					State = 105;
					Match(RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 124;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 122;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new PreprocessorBinaryContext(new Preprocessor_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 110;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 111;
						((PreprocessorBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
							((PreprocessorBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 112;
						preprocessor_expression(6);
						}
						break;
					case 2:
						{
						_localctx = new PreprocessorBinaryContext(new Preprocessor_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 113;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 114;
						((PreprocessorBinaryContext)_localctx).op = Match(AND);
						State = 115;
						preprocessor_expression(5);
						}
						break;
					case 3:
						{
						_localctx = new PreprocessorBinaryContext(new Preprocessor_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 116;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 117;
						((PreprocessorBinaryContext)_localctx).op = Match(OR);
						State = 118;
						preprocessor_expression(4);
						}
						break;
					case 4:
						{
						_localctx = new PreprocessorBinaryContext(new Preprocessor_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 119;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 120;
						((PreprocessorBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1006632960L) != 0)) ) {
							((PreprocessorBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 121;
						preprocessor_expression(3);
						}
						break;
					}
					} 
				}
				State = 126;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return preprocessor_expression_sempred((Preprocessor_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool preprocessor_expression_sempred(Preprocessor_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,42,128,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,5,0,18,8,0,10,0,12,0,21,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,38,8,1,1,2,4,2,41,8,2,11,2,12,2,42,1,3,1,
		3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,53,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,62,
		8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,75,8,5,3,5,77,8,5,
		1,6,4,6,80,8,6,11,6,12,6,81,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,
		7,94,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,107,8,7,3,7,109,
		8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,123,8,7,10,7,12,
		7,126,9,7,1,7,0,1,14,8,0,2,4,6,8,10,12,14,0,3,1,1,35,35,1,0,22,23,1,0,
		26,29,149,0,19,1,0,0,0,2,37,1,0,0,0,4,40,1,0,0,0,6,44,1,0,0,0,8,52,1,0,
		0,0,10,76,1,0,0,0,12,79,1,0,0,0,14,108,1,0,0,0,16,18,3,2,1,0,17,16,1,0,
		0,0,18,21,1,0,0,0,19,17,1,0,0,0,19,20,1,0,0,0,20,22,1,0,0,0,21,19,1,0,
		0,0,22,23,5,0,0,1,23,1,1,0,0,0,24,25,5,1,0,0,25,26,3,6,3,0,26,27,7,0,0,
		0,27,38,1,0,0,0,28,29,5,1,0,0,29,30,3,10,5,0,30,31,7,0,0,0,31,38,1,0,0,
		0,32,33,5,1,0,0,33,34,3,8,4,0,34,35,7,0,0,0,35,38,1,0,0,0,36,38,3,4,2,
		0,37,24,1,0,0,0,37,28,1,0,0,0,37,32,1,0,0,0,37,36,1,0,0,0,38,3,1,0,0,0,
		39,41,5,2,0,0,40,39,1,0,0,0,41,42,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,
		43,5,1,0,0,0,44,45,5,4,0,0,45,46,3,12,6,0,46,7,1,0,0,0,47,48,5,5,0,0,48,
		49,5,6,0,0,49,53,3,12,6,0,50,51,5,5,0,0,51,53,3,12,6,0,52,47,1,0,0,0,52,
		50,1,0,0,0,53,9,1,0,0,0,54,55,5,9,0,0,55,77,3,14,7,0,56,57,5,10,0,0,57,
		77,3,14,7,0,58,77,5,11,0,0,59,61,5,15,0,0,60,62,3,12,6,0,61,60,1,0,0,0,
		61,62,1,0,0,0,62,77,1,0,0,0,63,64,5,13,0,0,64,77,5,32,0,0,65,66,5,14,0,
		0,66,77,5,32,0,0,67,68,5,12,0,0,68,77,5,32,0,0,69,70,5,18,0,0,70,77,3,
		12,6,0,71,72,5,7,0,0,72,74,5,32,0,0,73,75,3,12,6,0,74,73,1,0,0,0,74,75,
		1,0,0,0,75,77,1,0,0,0,76,54,1,0,0,0,76,56,1,0,0,0,76,58,1,0,0,0,76,59,
		1,0,0,0,76,63,1,0,0,0,76,65,1,0,0,0,76,67,1,0,0,0,76,69,1,0,0,0,76,71,
		1,0,0,0,77,11,1,0,0,0,78,80,5,40,0,0,79,78,1,0,0,0,80,81,1,0,0,0,81,79,
		1,0,0,0,81,82,1,0,0,0,82,13,1,0,0,0,83,84,6,7,-1,0,84,109,5,16,0,0,85,
		109,5,17,0,0,86,109,5,33,0,0,87,109,5,31,0,0,88,93,5,32,0,0,89,90,5,20,
		0,0,90,91,3,14,7,0,91,92,5,21,0,0,92,94,1,0,0,0,93,89,1,0,0,0,93,94,1,
		0,0,0,94,109,1,0,0,0,95,96,5,20,0,0,96,97,3,14,7,0,97,98,5,21,0,0,98,109,
		1,0,0,0,99,100,5,19,0,0,100,109,3,14,7,6,101,106,5,8,0,0,102,107,5,32,
		0,0,103,104,5,20,0,0,104,105,5,32,0,0,105,107,5,21,0,0,106,102,1,0,0,0,
		106,103,1,0,0,0,107,109,1,0,0,0,108,83,1,0,0,0,108,85,1,0,0,0,108,86,1,
		0,0,0,108,87,1,0,0,0,108,88,1,0,0,0,108,95,1,0,0,0,108,99,1,0,0,0,108,
		101,1,0,0,0,109,124,1,0,0,0,110,111,10,5,0,0,111,112,7,1,0,0,112,123,3,
		14,7,6,113,114,10,4,0,0,114,115,5,24,0,0,115,123,3,14,7,5,116,117,10,3,
		0,0,117,118,5,25,0,0,118,123,3,14,7,4,119,120,10,2,0,0,120,121,7,2,0,0,
		121,123,3,14,7,3,122,110,1,0,0,0,122,113,1,0,0,0,122,116,1,0,0,0,122,119,
		1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,15,1,0,0,0,
		126,124,1,0,0,0,13,19,37,42,52,61,74,76,81,93,106,108,122,124
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DotNetOrb.IdlCompiler
