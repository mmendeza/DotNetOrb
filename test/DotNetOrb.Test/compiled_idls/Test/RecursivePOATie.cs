/**
 * Generated by DotNetORb.IdlCompiler V 1.0.8.0
 * Timestamp: 27/08/2025 6:53:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace Test
{

	public class RecursivePOATie: RecursivePOA
	{
		public IRecursiveOperations _OperationsDelegate { get; set; }
		private PortableServer.IPOA _poa;

		public RecursivePOATie(IRecursiveOperations d)
		{
			_OperationsDelegate = d;
		}

		public RecursivePOATie(IRecursiveOperations d, PortableServer.POA poa)
		{
			_OperationsDelegate = d;
			_poa = poa;
		}

		public override PortableServer.IPOA _DefaultPOA()
		{
			if (_poa != null)
			{
				return _poa;
			}
			return base._DefaultPOA();
		}

		public override Test.IRecursive _This()
		{
			return Test.RecursiveHelper.Narrow(_ThisObject());
		}

		public override Test.IRecursive _This(CORBA.ORB orb)
		{
			return Test.RecursiveHelper.Narrow(_ThisObject(orb));
		}

		[IdlName("SendFoo")]
		public override Test.Recursive.Foo SendFoo(Test.Recursive.Foo f)
		{
			return _OperationsDelegate.SendFoo(f);
		}
		[IdlName("SendBar")]
		public override Test.Recursive.Bar SendBar(Test.Recursive.Bar b)
		{
			return _OperationsDelegate.SendBar(b);
		}
		[IdlName("SendAny")]
		public override CORBA.Any SendAny(CORBA.Any a)
		{
			return _OperationsDelegate.SendAny(a);
		}
		[IdlName("SendAny")]
		public override Task<CORBA.Any> SendAnyAsync(CORBA.Any a)
		{
			CORBA.Any _result;
			_result = _OperationsDelegate.SendAny(a);
			return Task.FromResult(_result);
		}
	}
}
