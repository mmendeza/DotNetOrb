/**
 * Generated by DotNetORb.IdlCompiler V 1.0.8.0
 * Timestamp: 27/08/2025 6:53:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace Test.VT
{
	[IdlName("ManagerRecord")]
	[Truncatable(typeof(Test.VT.EmployeeRecord))]
	[RepositoryID("IDL:Test/VT/ManagerRecord:1.0")]
	[Helper(typeof(ManagerRecordHelper))]
	public abstract class ManagerRecord : Test.VT.EmployeeRecord, CORBA.IStreamableValue
	{
		public override string[] _TruncatableIds { get => new[] {"IDL:Test/VT/ManagerRecord:1.0", "IDL:Test/VT/EmployeeRecord:1.0"}; } 

		public override CORBA.TypeCode _Type { get => Test.VT.ManagerRecordHelper.Type(); }


		[IdlName("direct_reports")]
		public Test.VT.EmployeeRecord[] DirectReports { get; set; }


		public override void _Write(CORBA.IOutputStream outputStream)
		{
			base._Write(outputStream);
			{
				outputStream.WriteLong(DirectReports.Length);
				for (int i0 = 0; i0 < DirectReports.Length; i0++)
				{
					EmployeeRecordHelper.Write(outputStream, DirectReports[i0]);
				}
			}
		}

		public override void _Read(CORBA.IInputStream inputStream)
		{
			base._Read(inputStream);
			{
				var _capacity0 = inputStream.ReadLong();
				if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
				{
					throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
				}
				DirectReports = new Test.VT.EmployeeRecord[_capacity0];
				for (int i0 = 0; i0 < _capacity0; i0++)
				{
					Test.VT.EmployeeRecord _item0;
					_item0 = EmployeeRecordHelper.Read(inputStream);
					DirectReports[i0] = _item0;
				}
			}
		}
	}
}

