/**
 * Generated by DotNetORb.IdlCompiler V 1.0.8.0
 * Timestamp: 27/08/2025 6:53:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace Test
{

	public abstract class RecursivePOA: PortableServer.Servant, CORBA.IInvokeHandler, IRecursiveOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static RecursivePOA()
		{
			_opsDict.Add("SendFoo", 0);
			_opsDict.Add("SendBar", 1);
			_opsDict.Add("SendAny", 2);
		}
		private string[] _ids = {"IDL:Test/Recursive:1.0"};

		[IdlName("SendFoo")]
		public abstract Test.Recursive.Foo SendFoo(Test.Recursive.Foo f);
		[IdlName("SendBar")]
		public abstract Test.Recursive.Bar SendBar(Test.Recursive.Bar b);
		[IdlName("SendAny")]
		public abstract CORBA.Any SendAny(CORBA.Any a);
		[IdlName("SendAny")]
		public virtual Task<CORBA.Any> SendAnyAsync(CORBA.Any a)
		{
			CORBA.Any _result;
			_result = SendAny(a);
			return Task.FromResult(_result);
		}

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual Test.IRecursive _This()
		{
			return Test.RecursiveHelper.Narrow(_ThisObject());
		}

		public virtual Test.IRecursive _This(CORBA.ORB orb)
		{
			return Test.RecursiveHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
							Test.Recursive.Foo f;
							f = Test.Recursive.FooHelper.Read(inputStream);
							outputStream = handler.CreateReply();
							var _result = SendFoo(f);
							Test.Recursive.FooHelper.Write(outputStream, _result);
					}
					break;
					case 1:
					{
							Test.Recursive.Bar b;
							b = Test.Recursive.BarHelper.Read(inputStream);
							outputStream = handler.CreateReply();
							var _result = SendBar(b);
							Test.Recursive.BarHelper.Write(outputStream, _result);
					}
					break;
					case 2:
					{
							CORBA.Any a;
							a = inputStream.ReadAny();
							outputStream = handler.CreateReply();
							var _result = SendAny(a);
							outputStream.WriteAny(_result);
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
